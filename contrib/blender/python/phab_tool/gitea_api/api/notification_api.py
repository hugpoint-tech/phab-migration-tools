"""
    Gitea API.

    This documentation describes the Gitea API.  # noqa: E501

    The version of the OpenAPI document: 1.19.0+dev-367-g8042ec1b9
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from phab_tool.gitea_api.api_client import ApiClient, Endpoint as _Endpoint
from phab_tool.gitea_api.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types
)
from phab_tool.gitea_api.model.notification_count import NotificationCount
from phab_tool.gitea_api.model.notification_thread import NotificationThread


class NotificationApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client
        self.notify_get_list_endpoint = _Endpoint(
            settings={
                'response_type': ([NotificationThread],),
                'auth': [
                    'AccessToken',
                    'AuthorizationHeaderToken',
                    'BasicAuth',
                    'SudoHeader',
                    'SudoParam',
                    'TOTPHeader',
                    'Token'
                ],
                'endpoint_path': '/notifications',
                'operation_id': 'notify_get_list',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'all',
                    'status_types',
                    'subject_type',
                    'since',
                    'before',
                    'page',
                    'limit',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                    'subject_type',
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                    ('subject_type',): {

                        "ISSUE": "issue",
                        "PULL": "pull",
                        "COMMIT": "commit",
                        "REPOSITORY": "repository"
                    },
                },
                'openapi_types': {
                    'all':
                        (bool,),
                    'status_types':
                        ([str],),
                    'subject_type':
                        ([str],),
                    'since':
                        (datetime,),
                    'before':
                        (datetime,),
                    'page':
                        (int,),
                    'limit':
                        (int,),
                },
                'attribute_map': {
                    'all': 'all',
                    'status_types': 'status-types',
                    'subject_type': 'subject-type',
                    'since': 'since',
                    'before': 'before',
                    'page': 'page',
                    'limit': 'limit',
                },
                'location_map': {
                    'all': 'query',
                    'status_types': 'query',
                    'subject_type': 'query',
                    'since': 'query',
                    'before': 'query',
                    'page': 'query',
                    'limit': 'query',
                },
                'collection_format_map': {
                    'status_types': 'multi',
                    'subject_type': 'multi',
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.notify_get_repo_list_endpoint = _Endpoint(
            settings={
                'response_type': ([NotificationThread],),
                'auth': [
                    'AccessToken',
                    'AuthorizationHeaderToken',
                    'BasicAuth',
                    'SudoHeader',
                    'SudoParam',
                    'TOTPHeader',
                    'Token'
                ],
                'endpoint_path': '/repos/{owner}/{repo}/notifications',
                'operation_id': 'notify_get_repo_list',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'owner',
                    'repo',
                    'all',
                    'status_types',
                    'subject_type',
                    'since',
                    'before',
                    'page',
                    'limit',
                ],
                'required': [
                    'owner',
                    'repo',
                ],
                'nullable': [
                ],
                'enum': [
                    'subject_type',
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                    ('subject_type',): {

                        "ISSUE": "issue",
                        "PULL": "pull",
                        "COMMIT": "commit",
                        "REPOSITORY": "repository"
                    },
                },
                'openapi_types': {
                    'owner':
                        (str,),
                    'repo':
                        (str,),
                    'all':
                        (bool,),
                    'status_types':
                        ([str],),
                    'subject_type':
                        ([str],),
                    'since':
                        (datetime,),
                    'before':
                        (datetime,),
                    'page':
                        (int,),
                    'limit':
                        (int,),
                },
                'attribute_map': {
                    'owner': 'owner',
                    'repo': 'repo',
                    'all': 'all',
                    'status_types': 'status-types',
                    'subject_type': 'subject-type',
                    'since': 'since',
                    'before': 'before',
                    'page': 'page',
                    'limit': 'limit',
                },
                'location_map': {
                    'owner': 'path',
                    'repo': 'path',
                    'all': 'query',
                    'status_types': 'query',
                    'subject_type': 'query',
                    'since': 'query',
                    'before': 'query',
                    'page': 'query',
                    'limit': 'query',
                },
                'collection_format_map': {
                    'status_types': 'multi',
                    'subject_type': 'multi',
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.notify_get_thread_endpoint = _Endpoint(
            settings={
                'response_type': (NotificationThread,),
                'auth': [
                    'AccessToken',
                    'AuthorizationHeaderToken',
                    'BasicAuth',
                    'SudoHeader',
                    'SudoParam',
                    'TOTPHeader',
                    'Token'
                ],
                'endpoint_path': '/notifications/threads/{id}',
                'operation_id': 'notify_get_thread',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'id',
                ],
                'required': [
                    'id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'id':
                        (str,),
                },
                'attribute_map': {
                    'id': 'id',
                },
                'location_map': {
                    'id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.notify_new_available_endpoint = _Endpoint(
            settings={
                'response_type': (NotificationCount,),
                'auth': [
                    'AccessToken',
                    'AuthorizationHeaderToken',
                    'BasicAuth',
                    'SudoHeader',
                    'SudoParam',
                    'TOTPHeader',
                    'Token'
                ],
                'endpoint_path': '/notifications/new',
                'operation_id': 'notify_new_available',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                },
                'attribute_map': {
                },
                'location_map': {
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json',
                    'text/html'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.notify_read_list_endpoint = _Endpoint(
            settings={
                'response_type': ([NotificationThread],),
                'auth': [
                    'AccessToken',
                    'AuthorizationHeaderToken',
                    'BasicAuth',
                    'SudoHeader',
                    'SudoParam',
                    'TOTPHeader',
                    'Token'
                ],
                'endpoint_path': '/notifications',
                'operation_id': 'notify_read_list',
                'http_method': 'PUT',
                'servers': None,
            },
            params_map={
                'all': [
                    'last_read_at',
                    'all',
                    'status_types',
                    'to_status',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'last_read_at':
                        (datetime,),
                    'all':
                        (str,),
                    'status_types':
                        ([str],),
                    'to_status':
                        (str,),
                },
                'attribute_map': {
                    'last_read_at': 'last_read_at',
                    'all': 'all',
                    'status_types': 'status-types',
                    'to_status': 'to-status',
                },
                'location_map': {
                    'last_read_at': 'query',
                    'all': 'query',
                    'status_types': 'query',
                    'to_status': 'query',
                },
                'collection_format_map': {
                    'status_types': 'multi',
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.notify_read_repo_list_endpoint = _Endpoint(
            settings={
                'response_type': ([NotificationThread],),
                'auth': [
                    'AccessToken',
                    'AuthorizationHeaderToken',
                    'BasicAuth',
                    'SudoHeader',
                    'SudoParam',
                    'TOTPHeader',
                    'Token'
                ],
                'endpoint_path': '/repos/{owner}/{repo}/notifications',
                'operation_id': 'notify_read_repo_list',
                'http_method': 'PUT',
                'servers': None,
            },
            params_map={
                'all': [
                    'owner',
                    'repo',
                    'all',
                    'status_types',
                    'to_status',
                    'last_read_at',
                ],
                'required': [
                    'owner',
                    'repo',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'owner':
                        (str,),
                    'repo':
                        (str,),
                    'all':
                        (str,),
                    'status_types':
                        ([str],),
                    'to_status':
                        (str,),
                    'last_read_at':
                        (datetime,),
                },
                'attribute_map': {
                    'owner': 'owner',
                    'repo': 'repo',
                    'all': 'all',
                    'status_types': 'status-types',
                    'to_status': 'to-status',
                    'last_read_at': 'last_read_at',
                },
                'location_map': {
                    'owner': 'path',
                    'repo': 'path',
                    'all': 'query',
                    'status_types': 'query',
                    'to_status': 'query',
                    'last_read_at': 'query',
                },
                'collection_format_map': {
                    'status_types': 'multi',
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.notify_read_thread_endpoint = _Endpoint(
            settings={
                'response_type': (NotificationThread,),
                'auth': [
                    'AccessToken',
                    'AuthorizationHeaderToken',
                    'BasicAuth',
                    'SudoHeader',
                    'SudoParam',
                    'TOTPHeader',
                    'Token'
                ],
                'endpoint_path': '/notifications/threads/{id}',
                'operation_id': 'notify_read_thread',
                'http_method': 'PATCH',
                'servers': None,
            },
            params_map={
                'all': [
                    'id',
                    'to_status',
                ],
                'required': [
                    'id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'id':
                        (str,),
                    'to_status':
                        (str,),
                },
                'attribute_map': {
                    'id': 'id',
                    'to_status': 'to-status',
                },
                'location_map': {
                    'id': 'path',
                    'to_status': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )

    def notify_get_list(
        self,
        **kwargs
    ):
        """List users's notification threads  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.notify_get_list(async_req=True)
        >>> result = thread.get()


        Keyword Args:
            all (bool): If true, show notifications marked as read. Default value is false. [optional]
            status_types ([str]): Show notifications with the provided status types. Options are: unread, read and/or pinned. Defaults to unread & pinned.. [optional]
            subject_type ([str]): filter notifications by subject type. [optional]
            since (datetime): Only show notifications updated after the given time. This is a timestamp in RFC 3339 format. [optional]
            before (datetime): Only show notifications updated before the given time. This is a timestamp in RFC 3339 format. [optional]
            page (int): page number of results to return (1-based). [optional]
            limit (int): page size of results. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            [NotificationThread]
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        return self.notify_get_list_endpoint.call_with_http_info(**kwargs)

    def notify_get_repo_list(
        self,
        owner,
        repo,
        **kwargs
    ):
        """List users's notification threads on a specific repo  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.notify_get_repo_list(owner, repo, async_req=True)
        >>> result = thread.get()

        Args:
            owner (str): owner of the repo
            repo (str): name of the repo

        Keyword Args:
            all (bool): If true, show notifications marked as read. Default value is false. [optional]
            status_types ([str]): Show notifications with the provided status types. Options are: unread, read and/or pinned. Defaults to unread & pinned. [optional]
            subject_type ([str]): filter notifications by subject type. [optional]
            since (datetime): Only show notifications updated after the given time. This is a timestamp in RFC 3339 format. [optional]
            before (datetime): Only show notifications updated before the given time. This is a timestamp in RFC 3339 format. [optional]
            page (int): page number of results to return (1-based). [optional]
            limit (int): page size of results. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            [NotificationThread]
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['owner'] = \
            owner
        kwargs['repo'] = \
            repo
        return self.notify_get_repo_list_endpoint.call_with_http_info(**kwargs)

    def notify_get_thread(
        self,
        id,
        **kwargs
    ):
        """Get notification thread by ID  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.notify_get_thread(id, async_req=True)
        >>> result = thread.get()

        Args:
            id (str): id of notification thread

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            NotificationThread
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['id'] = \
            id
        return self.notify_get_thread_endpoint.call_with_http_info(**kwargs)

    def notify_new_available(
        self,
        **kwargs
    ):
        """Check if unread notifications exist  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.notify_new_available(async_req=True)
        >>> result = thread.get()


        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            NotificationCount
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        return self.notify_new_available_endpoint.call_with_http_info(**kwargs)

    def notify_read_list(
        self,
        **kwargs
    ):
        """Mark notification threads as read, pinned or unread  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.notify_read_list(async_req=True)
        >>> result = thread.get()


        Keyword Args:
            last_read_at (datetime): Describes the last point that notifications were checked. Anything updated since this time will not be updated.. [optional]
            all (str): If true, mark all notifications on this repo. Default value is false. [optional]
            status_types ([str]): Mark notifications with the provided status types. Options are: unread, read and/or pinned. Defaults to unread.. [optional]
            to_status (str): Status to mark notifications as, Defaults to read.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            [NotificationThread]
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        return self.notify_read_list_endpoint.call_with_http_info(**kwargs)

    def notify_read_repo_list(
        self,
        owner,
        repo,
        **kwargs
    ):
        """Mark notification threads as read, pinned or unread on a specific repo  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.notify_read_repo_list(owner, repo, async_req=True)
        >>> result = thread.get()

        Args:
            owner (str): owner of the repo
            repo (str): name of the repo

        Keyword Args:
            all (str): If true, mark all notifications on this repo. Default value is false. [optional]
            status_types ([str]): Mark notifications with the provided status types. Options are: unread, read and/or pinned. Defaults to unread.. [optional]
            to_status (str): Status to mark notifications as. Defaults to read.. [optional]
            last_read_at (datetime): Describes the last point that notifications were checked. Anything updated since this time will not be updated.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            [NotificationThread]
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['owner'] = \
            owner
        kwargs['repo'] = \
            repo
        return self.notify_read_repo_list_endpoint.call_with_http_info(**kwargs)

    def notify_read_thread(
        self,
        id,
        **kwargs
    ):
        """Mark notification thread as read by ID  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.notify_read_thread(id, async_req=True)
        >>> result = thread.get()

        Args:
            id (str): id of notification thread

        Keyword Args:
            to_status (str): Status to mark notifications as. [optional] if omitted the server will use the default value of "read"
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            NotificationThread
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['id'] = \
            id
        return self.notify_read_thread_endpoint.call_with_http_info(**kwargs)

