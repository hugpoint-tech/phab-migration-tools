"""
    Gitea API.

    This documentation describes the Gitea API.  # noqa: E501

    The version of the OpenAPI document: 1.19.0+dev-367-g8042ec1b9
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from phab_tool.gitea_api.api_client import ApiClient, Endpoint as _Endpoint
from phab_tool.gitea_api.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types
)
from phab_tool.gitea_api.model.package import Package
from phab_tool.gitea_api.model.package_file import PackageFile


class PackageApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client
        self.delete_package_endpoint = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'AccessToken',
                    'AuthorizationHeaderToken',
                    'BasicAuth',
                    'SudoHeader',
                    'SudoParam',
                    'TOTPHeader',
                    'Token'
                ],
                'endpoint_path': '/packages/{owner}/{type}/{name}/{version}',
                'operation_id': 'delete_package',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'owner',
                    'type',
                    'name',
                    'version',
                ],
                'required': [
                    'owner',
                    'type',
                    'name',
                    'version',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'owner':
                        (str,),
                    'type':
                        (str,),
                    'name':
                        (str,),
                    'version':
                        (str,),
                },
                'attribute_map': {
                    'owner': 'owner',
                    'type': 'type',
                    'name': 'name',
                    'version': 'version',
                },
                'location_map': {
                    'owner': 'path',
                    'type': 'path',
                    'name': 'path',
                    'version': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_package_endpoint = _Endpoint(
            settings={
                'response_type': (Package,),
                'auth': [
                    'AccessToken',
                    'AuthorizationHeaderToken',
                    'BasicAuth',
                    'SudoHeader',
                    'SudoParam',
                    'TOTPHeader',
                    'Token'
                ],
                'endpoint_path': '/packages/{owner}/{type}/{name}/{version}',
                'operation_id': 'get_package',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'owner',
                    'type',
                    'name',
                    'version',
                ],
                'required': [
                    'owner',
                    'type',
                    'name',
                    'version',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'owner':
                        (str,),
                    'type':
                        (str,),
                    'name':
                        (str,),
                    'version':
                        (str,),
                },
                'attribute_map': {
                    'owner': 'owner',
                    'type': 'type',
                    'name': 'name',
                    'version': 'version',
                },
                'location_map': {
                    'owner': 'path',
                    'type': 'path',
                    'name': 'path',
                    'version': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.list_package_files_endpoint = _Endpoint(
            settings={
                'response_type': ([PackageFile],),
                'auth': [
                    'AccessToken',
                    'AuthorizationHeaderToken',
                    'BasicAuth',
                    'SudoHeader',
                    'SudoParam',
                    'TOTPHeader',
                    'Token'
                ],
                'endpoint_path': '/packages/{owner}/{type}/{name}/{version}/files',
                'operation_id': 'list_package_files',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'owner',
                    'type',
                    'name',
                    'version',
                ],
                'required': [
                    'owner',
                    'type',
                    'name',
                    'version',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'owner':
                        (str,),
                    'type':
                        (str,),
                    'name':
                        (str,),
                    'version':
                        (str,),
                },
                'attribute_map': {
                    'owner': 'owner',
                    'type': 'type',
                    'name': 'name',
                    'version': 'version',
                },
                'location_map': {
                    'owner': 'path',
                    'type': 'path',
                    'name': 'path',
                    'version': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.list_packages_endpoint = _Endpoint(
            settings={
                'response_type': ([Package],),
                'auth': [
                    'AccessToken',
                    'AuthorizationHeaderToken',
                    'BasicAuth',
                    'SudoHeader',
                    'SudoParam',
                    'TOTPHeader',
                    'Token'
                ],
                'endpoint_path': '/packages/{owner}',
                'operation_id': 'list_packages',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'owner',
                    'page',
                    'limit',
                    'type',
                    'q',
                ],
                'required': [
                    'owner',
                ],
                'nullable': [
                ],
                'enum': [
                    'type',
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                    ('type',): {

                        "COMPOSER": "composer",
                        "CONAN": "conan",
                        "CONTAINER": "container",
                        "GENERIC": "generic",
                        "HELM": "helm",
                        "MAVEN": "maven",
                        "NPM": "npm",
                        "NUGET": "nuget",
                        "PUB": "pub",
                        "PYPI": "pypi",
                        "RUBYGEMS": "rubygems",
                        "VAGRANT": "vagrant"
                    },
                },
                'openapi_types': {
                    'owner':
                        (str,),
                    'page':
                        (int,),
                    'limit':
                        (int,),
                    'type':
                        (str,),
                    'q':
                        (str,),
                },
                'attribute_map': {
                    'owner': 'owner',
                    'page': 'page',
                    'limit': 'limit',
                    'type': 'type',
                    'q': 'q',
                },
                'location_map': {
                    'owner': 'path',
                    'page': 'query',
                    'limit': 'query',
                    'type': 'query',
                    'q': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )

    def delete_package(
        self,
        owner,
        type,
        name,
        version,
        **kwargs
    ):
        """Delete a package  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_package(owner, type, name, version, async_req=True)
        >>> result = thread.get()

        Args:
            owner (str): owner of the package
            type (str): type of the package
            name (str): name of the package
            version (str): version of the package

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            None
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['owner'] = \
            owner
        kwargs['type'] = \
            type
        kwargs['name'] = \
            name
        kwargs['version'] = \
            version
        return self.delete_package_endpoint.call_with_http_info(**kwargs)

    def get_package(
        self,
        owner,
        type,
        name,
        version,
        **kwargs
    ):
        """Gets a package  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_package(owner, type, name, version, async_req=True)
        >>> result = thread.get()

        Args:
            owner (str): owner of the package
            type (str): type of the package
            name (str): name of the package
            version (str): version of the package

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            Package
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['owner'] = \
            owner
        kwargs['type'] = \
            type
        kwargs['name'] = \
            name
        kwargs['version'] = \
            version
        return self.get_package_endpoint.call_with_http_info(**kwargs)

    def list_package_files(
        self,
        owner,
        type,
        name,
        version,
        **kwargs
    ):
        """Gets all files of a package  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.list_package_files(owner, type, name, version, async_req=True)
        >>> result = thread.get()

        Args:
            owner (str): owner of the package
            type (str): type of the package
            name (str): name of the package
            version (str): version of the package

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            [PackageFile]
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['owner'] = \
            owner
        kwargs['type'] = \
            type
        kwargs['name'] = \
            name
        kwargs['version'] = \
            version
        return self.list_package_files_endpoint.call_with_http_info(**kwargs)

    def list_packages(
        self,
        owner,
        **kwargs
    ):
        """Gets all packages of an owner  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.list_packages(owner, async_req=True)
        >>> result = thread.get()

        Args:
            owner (str): owner of the packages

        Keyword Args:
            page (int): page number of results to return (1-based). [optional]
            limit (int): page size of results. [optional]
            type (str): package type filter. [optional]
            q (str): name filter. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            [Package]
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['owner'] = \
            owner
        return self.list_packages_endpoint.call_with_http_info(**kwargs)

