"""
    Gitea API.

    This documentation describes the Gitea API.  # noqa: E501

    The version of the OpenAPI document: 1.19.0+dev-367-g8042ec1b9
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from phab_tool.gitea_api.api_client import ApiClient, Endpoint as _Endpoint
from phab_tool.gitea_api.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types
)
from phab_tool.gitea_api.model.api_error import APIError
from phab_tool.gitea_api.model.add_collaborator_option import AddCollaboratorOption
from phab_tool.gitea_api.model.annotated_tag import AnnotatedTag
from phab_tool.gitea_api.model.attachment import Attachment
from phab_tool.gitea_api.model.branch import Branch
from phab_tool.gitea_api.model.branch_protection import BranchProtection
from phab_tool.gitea_api.model.changed_file import ChangedFile
from phab_tool.gitea_api.model.combined_status import CombinedStatus
from phab_tool.gitea_api.model.commit import Commit
from phab_tool.gitea_api.model.commit_status import CommitStatus
from phab_tool.gitea_api.model.contents_response import ContentsResponse
from phab_tool.gitea_api.model.create_branch_protection_option import CreateBranchProtectionOption
from phab_tool.gitea_api.model.create_branch_repo_option import CreateBranchRepoOption
from phab_tool.gitea_api.model.create_file_options import CreateFileOptions
from phab_tool.gitea_api.model.create_fork_option import CreateForkOption
from phab_tool.gitea_api.model.create_hook_option import CreateHookOption
from phab_tool.gitea_api.model.create_key_option import CreateKeyOption
from phab_tool.gitea_api.model.create_pull_request_option import CreatePullRequestOption
from phab_tool.gitea_api.model.create_pull_review_options import CreatePullReviewOptions
from phab_tool.gitea_api.model.create_push_mirror_option import CreatePushMirrorOption
from phab_tool.gitea_api.model.create_release_option import CreateReleaseOption
from phab_tool.gitea_api.model.create_repo_option import CreateRepoOption
from phab_tool.gitea_api.model.create_status_option import CreateStatusOption
from phab_tool.gitea_api.model.create_tag_option import CreateTagOption
from phab_tool.gitea_api.model.create_wiki_page_options import CreateWikiPageOptions
from phab_tool.gitea_api.model.delete_file_options import DeleteFileOptions
from phab_tool.gitea_api.model.deploy_key import DeployKey
from phab_tool.gitea_api.model.dismiss_pull_review_options import DismissPullReviewOptions
from phab_tool.gitea_api.model.edit_attachment_options import EditAttachmentOptions
from phab_tool.gitea_api.model.edit_branch_protection_option import EditBranchProtectionOption
from phab_tool.gitea_api.model.edit_git_hook_option import EditGitHookOption
from phab_tool.gitea_api.model.edit_hook_option import EditHookOption
from phab_tool.gitea_api.model.edit_pull_request_option import EditPullRequestOption
from phab_tool.gitea_api.model.edit_release_option import EditReleaseOption
from phab_tool.gitea_api.model.edit_repo_option import EditRepoOption
from phab_tool.gitea_api.model.file_delete_response import FileDeleteResponse
from phab_tool.gitea_api.model.file_response import FileResponse
from phab_tool.gitea_api.model.generate_repo_option import GenerateRepoOption
from phab_tool.gitea_api.model.git_blob_response import GitBlobResponse
from phab_tool.gitea_api.model.git_hook import GitHook
from phab_tool.gitea_api.model.git_tree_response import GitTreeResponse
from phab_tool.gitea_api.model.hook import Hook
from phab_tool.gitea_api.model.issue_template import IssueTemplate
from phab_tool.gitea_api.model.merge_pull_request_option import MergePullRequestOption
from phab_tool.gitea_api.model.migrate_repo_options import MigrateRepoOptions
from phab_tool.gitea_api.model.note import Note
from phab_tool.gitea_api.model.pull_request import PullRequest
from phab_tool.gitea_api.model.pull_review import PullReview
from phab_tool.gitea_api.model.pull_review_comment import PullReviewComment
from phab_tool.gitea_api.model.pull_review_request_options import PullReviewRequestOptions
from phab_tool.gitea_api.model.push_mirror import PushMirror
from phab_tool.gitea_api.model.reference import Reference
from phab_tool.gitea_api.model.release import Release
from phab_tool.gitea_api.model.repo_collaborator_permission import RepoCollaboratorPermission
from phab_tool.gitea_api.model.repo_topic_options import RepoTopicOptions
from phab_tool.gitea_api.model.repository import Repository
from phab_tool.gitea_api.model.search_results import SearchResults
from phab_tool.gitea_api.model.submit_pull_review_options import SubmitPullReviewOptions
from phab_tool.gitea_api.model.tag import Tag
from phab_tool.gitea_api.model.team import Team
from phab_tool.gitea_api.model.topic_name import TopicName
from phab_tool.gitea_api.model.topic_response import TopicResponse
from phab_tool.gitea_api.model.tracked_time import TrackedTime
from phab_tool.gitea_api.model.transfer_repo_option import TransferRepoOption
from phab_tool.gitea_api.model.update_file_options import UpdateFileOptions
from phab_tool.gitea_api.model.user import User
from phab_tool.gitea_api.model.watch_info import WatchInfo
from phab_tool.gitea_api.model.wiki_commit_list import WikiCommitList
from phab_tool.gitea_api.model.wiki_page import WikiPage
from phab_tool.gitea_api.model.wiki_page_meta_data import WikiPageMetaData


class RepositoryApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client
        self.accept_repo_transfer_endpoint = _Endpoint(
            settings={
                'response_type': (Repository,),
                'auth': [
                    'AccessToken',
                    'AuthorizationHeaderToken',
                    'BasicAuth',
                    'SudoHeader',
                    'SudoParam',
                    'TOTPHeader',
                    'Token'
                ],
                'endpoint_path': '/repos/{owner}/{repo}/transfer/accept',
                'operation_id': 'accept_repo_transfer',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'owner',
                    'repo',
                ],
                'required': [
                    'owner',
                    'repo',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'owner':
                        (str,),
                    'repo':
                        (str,),
                },
                'attribute_map': {
                    'owner': 'owner',
                    'repo': 'repo',
                },
                'location_map': {
                    'owner': 'path',
                    'repo': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.create_current_user_repo_endpoint = _Endpoint(
            settings={
                'response_type': (Repository,),
                'auth': [
                    'AccessToken',
                    'AuthorizationHeaderToken',
                    'BasicAuth',
                    'SudoHeader',
                    'SudoParam',
                    'TOTPHeader',
                    'Token'
                ],
                'endpoint_path': '/user/repos',
                'operation_id': 'create_current_user_repo',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'body',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'body':
                        (CreateRepoOption,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'body': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.create_fork_endpoint = _Endpoint(
            settings={
                'response_type': (Repository,),
                'auth': [
                    'AccessToken',
                    'AuthorizationHeaderToken',
                    'BasicAuth',
                    'SudoHeader',
                    'SudoParam',
                    'TOTPHeader',
                    'Token'
                ],
                'endpoint_path': '/repos/{owner}/{repo}/forks',
                'operation_id': 'create_fork',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'owner',
                    'repo',
                    'body',
                ],
                'required': [
                    'owner',
                    'repo',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'owner':
                        (str,),
                    'repo':
                        (str,),
                    'body':
                        (CreateForkOption,),
                },
                'attribute_map': {
                    'owner': 'owner',
                    'repo': 'repo',
                },
                'location_map': {
                    'owner': 'path',
                    'repo': 'path',
                    'body': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json',
                    'text/plain'
                ]
            },
            api_client=api_client
        )
        self.generate_repo_endpoint = _Endpoint(
            settings={
                'response_type': (Repository,),
                'auth': [
                    'AccessToken',
                    'AuthorizationHeaderToken',
                    'BasicAuth',
                    'SudoHeader',
                    'SudoParam',
                    'TOTPHeader',
                    'Token'
                ],
                'endpoint_path': '/repos/{template_owner}/{template_repo}/generate',
                'operation_id': 'generate_repo',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'template_owner',
                    'template_repo',
                    'body',
                ],
                'required': [
                    'template_owner',
                    'template_repo',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'template_owner':
                        (str,),
                    'template_repo':
                        (str,),
                    'body':
                        (GenerateRepoOption,),
                },
                'attribute_map': {
                    'template_owner': 'template_owner',
                    'template_repo': 'template_repo',
                },
                'location_map': {
                    'template_owner': 'path',
                    'template_repo': 'path',
                    'body': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.get_annotated_tag_endpoint = _Endpoint(
            settings={
                'response_type': (AnnotatedTag,),
                'auth': [
                    'AccessToken',
                    'AuthorizationHeaderToken',
                    'BasicAuth',
                    'SudoHeader',
                    'SudoParam',
                    'TOTPHeader',
                    'Token'
                ],
                'endpoint_path': '/repos/{owner}/{repo}/git/tags/{sha}',
                'operation_id': 'get_annotated_tag',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'owner',
                    'repo',
                    'sha',
                ],
                'required': [
                    'owner',
                    'repo',
                    'sha',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'owner':
                        (str,),
                    'repo':
                        (str,),
                    'sha':
                        (str,),
                },
                'attribute_map': {
                    'owner': 'owner',
                    'repo': 'repo',
                    'sha': 'sha',
                },
                'location_map': {
                    'owner': 'path',
                    'repo': 'path',
                    'sha': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_blob_endpoint = _Endpoint(
            settings={
                'response_type': (GitBlobResponse,),
                'auth': [
                    'AccessToken',
                    'AuthorizationHeaderToken',
                    'BasicAuth',
                    'SudoHeader',
                    'SudoParam',
                    'TOTPHeader',
                    'Token'
                ],
                'endpoint_path': '/repos/{owner}/{repo}/git/blobs/{sha}',
                'operation_id': 'get_blob',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'owner',
                    'repo',
                    'sha',
                ],
                'required': [
                    'owner',
                    'repo',
                    'sha',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'owner':
                        (str,),
                    'repo':
                        (str,),
                    'sha':
                        (str,),
                },
                'attribute_map': {
                    'owner': 'owner',
                    'repo': 'repo',
                    'sha': 'sha',
                },
                'location_map': {
                    'owner': 'path',
                    'repo': 'path',
                    'sha': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_tree_endpoint = _Endpoint(
            settings={
                'response_type': (GitTreeResponse,),
                'auth': [
                    'AccessToken',
                    'AuthorizationHeaderToken',
                    'BasicAuth',
                    'SudoHeader',
                    'SudoParam',
                    'TOTPHeader',
                    'Token'
                ],
                'endpoint_path': '/repos/{owner}/{repo}/git/trees/{sha}',
                'operation_id': 'get_tree',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'owner',
                    'repo',
                    'sha',
                    'recursive',
                    'page',
                    'per_page',
                ],
                'required': [
                    'owner',
                    'repo',
                    'sha',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'owner':
                        (str,),
                    'repo':
                        (str,),
                    'sha':
                        (str,),
                    'recursive':
                        (bool,),
                    'page':
                        (int,),
                    'per_page':
                        (int,),
                },
                'attribute_map': {
                    'owner': 'owner',
                    'repo': 'repo',
                    'sha': 'sha',
                    'recursive': 'recursive',
                    'page': 'page',
                    'per_page': 'per_page',
                },
                'location_map': {
                    'owner': 'path',
                    'repo': 'path',
                    'sha': 'path',
                    'recursive': 'query',
                    'page': 'query',
                    'per_page': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.list_forks_endpoint = _Endpoint(
            settings={
                'response_type': ([Repository],),
                'auth': [
                    'AccessToken',
                    'AuthorizationHeaderToken',
                    'BasicAuth',
                    'SudoHeader',
                    'SudoParam',
                    'TOTPHeader',
                    'Token'
                ],
                'endpoint_path': '/repos/{owner}/{repo}/forks',
                'operation_id': 'list_forks',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'owner',
                    'repo',
                    'page',
                    'limit',
                ],
                'required': [
                    'owner',
                    'repo',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'owner':
                        (str,),
                    'repo':
                        (str,),
                    'page':
                        (int,),
                    'limit':
                        (int,),
                },
                'attribute_map': {
                    'owner': 'owner',
                    'repo': 'repo',
                    'page': 'page',
                    'limit': 'limit',
                },
                'location_map': {
                    'owner': 'path',
                    'repo': 'path',
                    'page': 'query',
                    'limit': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.reject_repo_transfer_endpoint = _Endpoint(
            settings={
                'response_type': (Repository,),
                'auth': [
                    'AccessToken',
                    'AuthorizationHeaderToken',
                    'BasicAuth',
                    'SudoHeader',
                    'SudoParam',
                    'TOTPHeader',
                    'Token'
                ],
                'endpoint_path': '/repos/{owner}/{repo}/transfer/reject',
                'operation_id': 'reject_repo_transfer',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'owner',
                    'repo',
                ],
                'required': [
                    'owner',
                    'repo',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'owner':
                        (str,),
                    'repo':
                        (str,),
                },
                'attribute_map': {
                    'owner': 'owner',
                    'repo': 'repo',
                },
                'location_map': {
                    'owner': 'path',
                    'repo': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.repo_add_collaborator_endpoint = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'AccessToken',
                    'AuthorizationHeaderToken',
                    'BasicAuth',
                    'SudoHeader',
                    'SudoParam',
                    'TOTPHeader',
                    'Token'
                ],
                'endpoint_path': '/repos/{owner}/{repo}/collaborators/{collaborator}',
                'operation_id': 'repo_add_collaborator',
                'http_method': 'PUT',
                'servers': None,
            },
            params_map={
                'all': [
                    'owner',
                    'repo',
                    'collaborator',
                    'body',
                ],
                'required': [
                    'owner',
                    'repo',
                    'collaborator',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'owner':
                        (str,),
                    'repo':
                        (str,),
                    'collaborator':
                        (str,),
                    'body':
                        (AddCollaboratorOption,),
                },
                'attribute_map': {
                    'owner': 'owner',
                    'repo': 'repo',
                    'collaborator': 'collaborator',
                },
                'location_map': {
                    'owner': 'path',
                    'repo': 'path',
                    'collaborator': 'path',
                    'body': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [],
                'content_type': [
                    'application/json',
                    'text/plain'
                ]
            },
            api_client=api_client
        )
        self.repo_add_push_mirror_endpoint = _Endpoint(
            settings={
                'response_type': (PushMirror,),
                'auth': [
                    'AccessToken',
                    'AuthorizationHeaderToken',
                    'BasicAuth',
                    'SudoHeader',
                    'SudoParam',
                    'TOTPHeader',
                    'Token'
                ],
                'endpoint_path': '/repos/{owner}/{repo}/push_mirrors',
                'operation_id': 'repo_add_push_mirror',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'owner',
                    'repo',
                    'body',
                ],
                'required': [
                    'owner',
                    'repo',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'owner':
                        (str,),
                    'repo':
                        (str,),
                    'body':
                        (CreatePushMirrorOption,),
                },
                'attribute_map': {
                    'owner': 'owner',
                    'repo': 'repo',
                },
                'location_map': {
                    'owner': 'path',
                    'repo': 'path',
                    'body': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.repo_add_team_endpoint = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'AccessToken',
                    'AuthorizationHeaderToken',
                    'BasicAuth',
                    'SudoHeader',
                    'SudoParam',
                    'TOTPHeader',
                    'Token'
                ],
                'endpoint_path': '/repos/{owner}/{repo}/teams/{team}',
                'operation_id': 'repo_add_team',
                'http_method': 'PUT',
                'servers': None,
            },
            params_map={
                'all': [
                    'owner',
                    'repo',
                    'team',
                ],
                'required': [
                    'owner',
                    'repo',
                    'team',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'owner':
                        (str,),
                    'repo':
                        (str,),
                    'team':
                        (str,),
                },
                'attribute_map': {
                    'owner': 'owner',
                    'repo': 'repo',
                    'team': 'team',
                },
                'location_map': {
                    'owner': 'path',
                    'repo': 'path',
                    'team': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [],
                'content_type': [],
            },
            api_client=api_client
        )
        self.repo_add_topic_endpoint = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'AccessToken',
                    'AuthorizationHeaderToken',
                    'BasicAuth',
                    'SudoHeader',
                    'SudoParam',
                    'TOTPHeader',
                    'Token'
                ],
                'endpoint_path': '/repos/{owner}/{repo}/topics/{topic}',
                'operation_id': 'repo_add_topic',
                'http_method': 'PUT',
                'servers': None,
            },
            params_map={
                'all': [
                    'owner',
                    'repo',
                    'topic',
                ],
                'required': [
                    'owner',
                    'repo',
                    'topic',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'owner':
                        (str,),
                    'repo':
                        (str,),
                    'topic':
                        (str,),
                },
                'attribute_map': {
                    'owner': 'owner',
                    'repo': 'repo',
                    'topic': 'topic',
                },
                'location_map': {
                    'owner': 'path',
                    'repo': 'path',
                    'topic': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [],
                'content_type': [],
            },
            api_client=api_client
        )
        self.repo_apply_diff_patch_endpoint = _Endpoint(
            settings={
                'response_type': (FileResponse,),
                'auth': [
                    'AccessToken',
                    'AuthorizationHeaderToken',
                    'BasicAuth',
                    'SudoHeader',
                    'SudoParam',
                    'TOTPHeader',
                    'Token'
                ],
                'endpoint_path': '/repos/{owner}/{repo}/diffpatch',
                'operation_id': 'repo_apply_diff_patch',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'owner',
                    'repo',
                    'body',
                ],
                'required': [
                    'owner',
                    'repo',
                    'body',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'owner':
                        (str,),
                    'repo':
                        (str,),
                    'body':
                        (UpdateFileOptions,),
                },
                'attribute_map': {
                    'owner': 'owner',
                    'repo': 'repo',
                },
                'location_map': {
                    'owner': 'path',
                    'repo': 'path',
                    'body': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.repo_cancel_scheduled_auto_merge_endpoint = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'AccessToken',
                    'AuthorizationHeaderToken',
                    'BasicAuth',
                    'SudoHeader',
                    'SudoParam',
                    'TOTPHeader',
                    'Token'
                ],
                'endpoint_path': '/repos/{owner}/{repo}/pulls/{index}/merge',
                'operation_id': 'repo_cancel_scheduled_auto_merge',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'owner',
                    'repo',
                    'index',
                ],
                'required': [
                    'owner',
                    'repo',
                    'index',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'owner':
                        (str,),
                    'repo':
                        (str,),
                    'index':
                        (int,),
                },
                'attribute_map': {
                    'owner': 'owner',
                    'repo': 'repo',
                    'index': 'index',
                },
                'location_map': {
                    'owner': 'path',
                    'repo': 'path',
                    'index': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [],
                'content_type': [],
            },
            api_client=api_client
        )
        self.repo_check_collaborator_endpoint = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'AccessToken',
                    'AuthorizationHeaderToken',
                    'BasicAuth',
                    'SudoHeader',
                    'SudoParam',
                    'TOTPHeader',
                    'Token'
                ],
                'endpoint_path': '/repos/{owner}/{repo}/collaborators/{collaborator}',
                'operation_id': 'repo_check_collaborator',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'owner',
                    'repo',
                    'collaborator',
                ],
                'required': [
                    'owner',
                    'repo',
                    'collaborator',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'owner':
                        (str,),
                    'repo':
                        (str,),
                    'collaborator':
                        (str,),
                },
                'attribute_map': {
                    'owner': 'owner',
                    'repo': 'repo',
                    'collaborator': 'collaborator',
                },
                'location_map': {
                    'owner': 'path',
                    'repo': 'path',
                    'collaborator': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [],
                'content_type': [],
            },
            api_client=api_client
        )
        self.repo_check_team_endpoint = _Endpoint(
            settings={
                'response_type': (Team,),
                'auth': [
                    'AccessToken',
                    'AuthorizationHeaderToken',
                    'BasicAuth',
                    'SudoHeader',
                    'SudoParam',
                    'TOTPHeader',
                    'Token'
                ],
                'endpoint_path': '/repos/{owner}/{repo}/teams/{team}',
                'operation_id': 'repo_check_team',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'owner',
                    'repo',
                    'team',
                ],
                'required': [
                    'owner',
                    'repo',
                    'team',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'owner':
                        (str,),
                    'repo':
                        (str,),
                    'team':
                        (str,),
                },
                'attribute_map': {
                    'owner': 'owner',
                    'repo': 'repo',
                    'team': 'team',
                },
                'location_map': {
                    'owner': 'path',
                    'repo': 'path',
                    'team': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.repo_create_branch_endpoint = _Endpoint(
            settings={
                'response_type': (Branch,),
                'auth': [
                    'AccessToken',
                    'AuthorizationHeaderToken',
                    'BasicAuth',
                    'SudoHeader',
                    'SudoParam',
                    'TOTPHeader',
                    'Token'
                ],
                'endpoint_path': '/repos/{owner}/{repo}/branches',
                'operation_id': 'repo_create_branch',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'owner',
                    'repo',
                    'body',
                ],
                'required': [
                    'owner',
                    'repo',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'owner':
                        (str,),
                    'repo':
                        (str,),
                    'body':
                        (CreateBranchRepoOption,),
                },
                'attribute_map': {
                    'owner': 'owner',
                    'repo': 'repo',
                },
                'location_map': {
                    'owner': 'path',
                    'repo': 'path',
                    'body': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.repo_create_branch_protection_endpoint = _Endpoint(
            settings={
                'response_type': (BranchProtection,),
                'auth': [
                    'AccessToken',
                    'AuthorizationHeaderToken',
                    'BasicAuth',
                    'SudoHeader',
                    'SudoParam',
                    'TOTPHeader',
                    'Token'
                ],
                'endpoint_path': '/repos/{owner}/{repo}/branch_protections',
                'operation_id': 'repo_create_branch_protection',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'owner',
                    'repo',
                    'body',
                ],
                'required': [
                    'owner',
                    'repo',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'owner':
                        (str,),
                    'repo':
                        (str,),
                    'body':
                        (CreateBranchProtectionOption,),
                },
                'attribute_map': {
                    'owner': 'owner',
                    'repo': 'repo',
                },
                'location_map': {
                    'owner': 'path',
                    'repo': 'path',
                    'body': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.repo_create_file_endpoint = _Endpoint(
            settings={
                'response_type': (FileResponse,),
                'auth': [
                    'AccessToken',
                    'AuthorizationHeaderToken',
                    'BasicAuth',
                    'SudoHeader',
                    'SudoParam',
                    'TOTPHeader',
                    'Token'
                ],
                'endpoint_path': '/repos/{owner}/{repo}/contents/{filepath}',
                'operation_id': 'repo_create_file',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'owner',
                    'repo',
                    'filepath',
                    'body',
                ],
                'required': [
                    'owner',
                    'repo',
                    'filepath',
                    'body',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'owner':
                        (str,),
                    'repo':
                        (str,),
                    'filepath':
                        (str,),
                    'body':
                        (CreateFileOptions,),
                },
                'attribute_map': {
                    'owner': 'owner',
                    'repo': 'repo',
                    'filepath': 'filepath',
                },
                'location_map': {
                    'owner': 'path',
                    'repo': 'path',
                    'filepath': 'path',
                    'body': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.repo_create_hook_endpoint = _Endpoint(
            settings={
                'response_type': (Hook,),
                'auth': [
                    'AccessToken',
                    'AuthorizationHeaderToken',
                    'BasicAuth',
                    'SudoHeader',
                    'SudoParam',
                    'TOTPHeader',
                    'Token'
                ],
                'endpoint_path': '/repos/{owner}/{repo}/hooks',
                'operation_id': 'repo_create_hook',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'owner',
                    'repo',
                    'body',
                ],
                'required': [
                    'owner',
                    'repo',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'owner':
                        (str,),
                    'repo':
                        (str,),
                    'body':
                        (CreateHookOption,),
                },
                'attribute_map': {
                    'owner': 'owner',
                    'repo': 'repo',
                },
                'location_map': {
                    'owner': 'path',
                    'repo': 'path',
                    'body': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.repo_create_key_endpoint = _Endpoint(
            settings={
                'response_type': (DeployKey,),
                'auth': [
                    'AccessToken',
                    'AuthorizationHeaderToken',
                    'BasicAuth',
                    'SudoHeader',
                    'SudoParam',
                    'TOTPHeader',
                    'Token'
                ],
                'endpoint_path': '/repos/{owner}/{repo}/keys',
                'operation_id': 'repo_create_key',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'owner',
                    'repo',
                    'body',
                ],
                'required': [
                    'owner',
                    'repo',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'owner':
                        (str,),
                    'repo':
                        (str,),
                    'body':
                        (CreateKeyOption,),
                },
                'attribute_map': {
                    'owner': 'owner',
                    'repo': 'repo',
                },
                'location_map': {
                    'owner': 'path',
                    'repo': 'path',
                    'body': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.repo_create_pull_request_endpoint = _Endpoint(
            settings={
                'response_type': (PullRequest,),
                'auth': [
                    'AccessToken',
                    'AuthorizationHeaderToken',
                    'BasicAuth',
                    'SudoHeader',
                    'SudoParam',
                    'TOTPHeader',
                    'Token'
                ],
                'endpoint_path': '/repos/{owner}/{repo}/pulls',
                'operation_id': 'repo_create_pull_request',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'owner',
                    'repo',
                    'body',
                ],
                'required': [
                    'owner',
                    'repo',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'owner':
                        (str,),
                    'repo':
                        (str,),
                    'body':
                        (CreatePullRequestOption,),
                },
                'attribute_map': {
                    'owner': 'owner',
                    'repo': 'repo',
                },
                'location_map': {
                    'owner': 'path',
                    'repo': 'path',
                    'body': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.repo_create_pull_review_endpoint = _Endpoint(
            settings={
                'response_type': (PullReview,),
                'auth': [
                    'AccessToken',
                    'AuthorizationHeaderToken',
                    'BasicAuth',
                    'SudoHeader',
                    'SudoParam',
                    'TOTPHeader',
                    'Token'
                ],
                'endpoint_path': '/repos/{owner}/{repo}/pulls/{index}/reviews',
                'operation_id': 'repo_create_pull_review',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'owner',
                    'repo',
                    'index',
                    'body',
                ],
                'required': [
                    'owner',
                    'repo',
                    'index',
                    'body',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'owner':
                        (str,),
                    'repo':
                        (str,),
                    'index':
                        (int,),
                    'body':
                        (CreatePullReviewOptions,),
                },
                'attribute_map': {
                    'owner': 'owner',
                    'repo': 'repo',
                    'index': 'index',
                },
                'location_map': {
                    'owner': 'path',
                    'repo': 'path',
                    'index': 'path',
                    'body': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json',
                    'text/plain'
                ]
            },
            api_client=api_client
        )
        self.repo_create_pull_review_requests_endpoint = _Endpoint(
            settings={
                'response_type': ([PullReview],),
                'auth': [
                    'AccessToken',
                    'AuthorizationHeaderToken',
                    'BasicAuth',
                    'SudoHeader',
                    'SudoParam',
                    'TOTPHeader',
                    'Token'
                ],
                'endpoint_path': '/repos/{owner}/{repo}/pulls/{index}/requested_reviewers',
                'operation_id': 'repo_create_pull_review_requests',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'owner',
                    'repo',
                    'index',
                    'body',
                ],
                'required': [
                    'owner',
                    'repo',
                    'index',
                    'body',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'owner':
                        (str,),
                    'repo':
                        (str,),
                    'index':
                        (int,),
                    'body':
                        (PullReviewRequestOptions,),
                },
                'attribute_map': {
                    'owner': 'owner',
                    'repo': 'repo',
                    'index': 'index',
                },
                'location_map': {
                    'owner': 'path',
                    'repo': 'path',
                    'index': 'path',
                    'body': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json',
                    'text/plain'
                ]
            },
            api_client=api_client
        )
        self.repo_create_release_endpoint = _Endpoint(
            settings={
                'response_type': (Release,),
                'auth': [
                    'AccessToken',
                    'AuthorizationHeaderToken',
                    'BasicAuth',
                    'SudoHeader',
                    'SudoParam',
                    'TOTPHeader',
                    'Token'
                ],
                'endpoint_path': '/repos/{owner}/{repo}/releases',
                'operation_id': 'repo_create_release',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'owner',
                    'repo',
                    'body',
                ],
                'required': [
                    'owner',
                    'repo',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'owner':
                        (str,),
                    'repo':
                        (str,),
                    'body':
                        (CreateReleaseOption,),
                },
                'attribute_map': {
                    'owner': 'owner',
                    'repo': 'repo',
                },
                'location_map': {
                    'owner': 'path',
                    'repo': 'path',
                    'body': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.repo_create_release_attachment_endpoint = _Endpoint(
            settings={
                'response_type': (Attachment,),
                'auth': [
                    'AccessToken',
                    'AuthorizationHeaderToken',
                    'BasicAuth',
                    'SudoHeader',
                    'SudoParam',
                    'TOTPHeader',
                    'Token'
                ],
                'endpoint_path': '/repos/{owner}/{repo}/releases/{id}/assets',
                'operation_id': 'repo_create_release_attachment',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'owner',
                    'repo',
                    'id',
                    'attachment',
                    'name',
                ],
                'required': [
                    'owner',
                    'repo',
                    'id',
                    'attachment',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'owner':
                        (str,),
                    'repo':
                        (str,),
                    'id':
                        (int,),
                    'attachment':
                        (file_type,),
                    'name':
                        (str,),
                },
                'attribute_map': {
                    'owner': 'owner',
                    'repo': 'repo',
                    'id': 'id',
                    'attachment': 'attachment',
                    'name': 'name',
                },
                'location_map': {
                    'owner': 'path',
                    'repo': 'path',
                    'id': 'path',
                    'attachment': 'form',
                    'name': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'multipart/form-data'
                ]
            },
            api_client=api_client
        )
        self.repo_create_status_endpoint = _Endpoint(
            settings={
                'response_type': (CommitStatus,),
                'auth': [
                    'AccessToken',
                    'AuthorizationHeaderToken',
                    'BasicAuth',
                    'SudoHeader',
                    'SudoParam',
                    'TOTPHeader',
                    'Token'
                ],
                'endpoint_path': '/repos/{owner}/{repo}/statuses/{sha}',
                'operation_id': 'repo_create_status',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'owner',
                    'repo',
                    'sha',
                    'body',
                ],
                'required': [
                    'owner',
                    'repo',
                    'sha',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'owner':
                        (str,),
                    'repo':
                        (str,),
                    'sha':
                        (str,),
                    'body':
                        (CreateStatusOption,),
                },
                'attribute_map': {
                    'owner': 'owner',
                    'repo': 'repo',
                    'sha': 'sha',
                },
                'location_map': {
                    'owner': 'path',
                    'repo': 'path',
                    'sha': 'path',
                    'body': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json',
                    'text/plain'
                ]
            },
            api_client=api_client
        )
        self.repo_create_tag_endpoint = _Endpoint(
            settings={
                'response_type': (Tag,),
                'auth': [
                    'AccessToken',
                    'AuthorizationHeaderToken',
                    'BasicAuth',
                    'SudoHeader',
                    'SudoParam',
                    'TOTPHeader',
                    'Token'
                ],
                'endpoint_path': '/repos/{owner}/{repo}/tags',
                'operation_id': 'repo_create_tag',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'owner',
                    'repo',
                    'body',
                ],
                'required': [
                    'owner',
                    'repo',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'owner':
                        (str,),
                    'repo':
                        (str,),
                    'body':
                        (CreateTagOption,),
                },
                'attribute_map': {
                    'owner': 'owner',
                    'repo': 'repo',
                },
                'location_map': {
                    'owner': 'path',
                    'repo': 'path',
                    'body': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json',
                    'text/plain'
                ]
            },
            api_client=api_client
        )
        self.repo_create_wiki_page_endpoint = _Endpoint(
            settings={
                'response_type': (WikiPage,),
                'auth': [
                    'AccessToken',
                    'AuthorizationHeaderToken',
                    'BasicAuth',
                    'SudoHeader',
                    'SudoParam',
                    'TOTPHeader',
                    'Token'
                ],
                'endpoint_path': '/repos/{owner}/{repo}/wiki/new',
                'operation_id': 'repo_create_wiki_page',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'owner',
                    'repo',
                    'body',
                ],
                'required': [
                    'owner',
                    'repo',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'owner':
                        (str,),
                    'repo':
                        (str,),
                    'body':
                        (CreateWikiPageOptions,),
                },
                'attribute_map': {
                    'owner': 'owner',
                    'repo': 'repo',
                },
                'location_map': {
                    'owner': 'path',
                    'repo': 'path',
                    'body': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json',
                    'text/html'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.repo_delete_endpoint = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'AccessToken',
                    'AuthorizationHeaderToken',
                    'BasicAuth',
                    'SudoHeader',
                    'SudoParam',
                    'TOTPHeader',
                    'Token'
                ],
                'endpoint_path': '/repos/{owner}/{repo}',
                'operation_id': 'repo_delete',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'owner',
                    'repo',
                ],
                'required': [
                    'owner',
                    'repo',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'owner':
                        (str,),
                    'repo':
                        (str,),
                },
                'attribute_map': {
                    'owner': 'owner',
                    'repo': 'repo',
                },
                'location_map': {
                    'owner': 'path',
                    'repo': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [],
                'content_type': [],
            },
            api_client=api_client
        )
        self.repo_delete_branch_endpoint = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'AccessToken',
                    'AuthorizationHeaderToken',
                    'BasicAuth',
                    'SudoHeader',
                    'SudoParam',
                    'TOTPHeader',
                    'Token'
                ],
                'endpoint_path': '/repos/{owner}/{repo}/branches/{branch}',
                'operation_id': 'repo_delete_branch',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'owner',
                    'repo',
                    'branch',
                ],
                'required': [
                    'owner',
                    'repo',
                    'branch',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'owner':
                        (str,),
                    'repo':
                        (str,),
                    'branch':
                        (str,),
                },
                'attribute_map': {
                    'owner': 'owner',
                    'repo': 'repo',
                    'branch': 'branch',
                },
                'location_map': {
                    'owner': 'path',
                    'repo': 'path',
                    'branch': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [],
                'content_type': [],
            },
            api_client=api_client
        )
        self.repo_delete_branch_protection_endpoint = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'AccessToken',
                    'AuthorizationHeaderToken',
                    'BasicAuth',
                    'SudoHeader',
                    'SudoParam',
                    'TOTPHeader',
                    'Token'
                ],
                'endpoint_path': '/repos/{owner}/{repo}/branch_protections/{name}',
                'operation_id': 'repo_delete_branch_protection',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'owner',
                    'repo',
                    'name',
                ],
                'required': [
                    'owner',
                    'repo',
                    'name',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'owner':
                        (str,),
                    'repo':
                        (str,),
                    'name':
                        (str,),
                },
                'attribute_map': {
                    'owner': 'owner',
                    'repo': 'repo',
                    'name': 'name',
                },
                'location_map': {
                    'owner': 'path',
                    'repo': 'path',
                    'name': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [],
                'content_type': [],
            },
            api_client=api_client
        )
        self.repo_delete_collaborator_endpoint = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'AccessToken',
                    'AuthorizationHeaderToken',
                    'BasicAuth',
                    'SudoHeader',
                    'SudoParam',
                    'TOTPHeader',
                    'Token'
                ],
                'endpoint_path': '/repos/{owner}/{repo}/collaborators/{collaborator}',
                'operation_id': 'repo_delete_collaborator',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'owner',
                    'repo',
                    'collaborator',
                ],
                'required': [
                    'owner',
                    'repo',
                    'collaborator',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'owner':
                        (str,),
                    'repo':
                        (str,),
                    'collaborator':
                        (str,),
                },
                'attribute_map': {
                    'owner': 'owner',
                    'repo': 'repo',
                    'collaborator': 'collaborator',
                },
                'location_map': {
                    'owner': 'path',
                    'repo': 'path',
                    'collaborator': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [],
                'content_type': [],
            },
            api_client=api_client
        )
        self.repo_delete_file_endpoint = _Endpoint(
            settings={
                'response_type': (FileDeleteResponse,),
                'auth': [
                    'AccessToken',
                    'AuthorizationHeaderToken',
                    'BasicAuth',
                    'SudoHeader',
                    'SudoParam',
                    'TOTPHeader',
                    'Token'
                ],
                'endpoint_path': '/repos/{owner}/{repo}/contents/{filepath}',
                'operation_id': 'repo_delete_file',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'owner',
                    'repo',
                    'filepath',
                    'body',
                ],
                'required': [
                    'owner',
                    'repo',
                    'filepath',
                    'body',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'owner':
                        (str,),
                    'repo':
                        (str,),
                    'filepath':
                        (str,),
                    'body':
                        (DeleteFileOptions,),
                },
                'attribute_map': {
                    'owner': 'owner',
                    'repo': 'repo',
                    'filepath': 'filepath',
                },
                'location_map': {
                    'owner': 'path',
                    'repo': 'path',
                    'filepath': 'path',
                    'body': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.repo_delete_git_hook_endpoint = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'AccessToken',
                    'AuthorizationHeaderToken',
                    'BasicAuth',
                    'SudoHeader',
                    'SudoParam',
                    'TOTPHeader',
                    'Token'
                ],
                'endpoint_path': '/repos/{owner}/{repo}/hooks/git/{id}',
                'operation_id': 'repo_delete_git_hook',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'owner',
                    'repo',
                    'id',
                ],
                'required': [
                    'owner',
                    'repo',
                    'id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'owner':
                        (str,),
                    'repo':
                        (str,),
                    'id':
                        (str,),
                },
                'attribute_map': {
                    'owner': 'owner',
                    'repo': 'repo',
                    'id': 'id',
                },
                'location_map': {
                    'owner': 'path',
                    'repo': 'path',
                    'id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [],
                'content_type': [],
            },
            api_client=api_client
        )
        self.repo_delete_hook_endpoint = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'AccessToken',
                    'AuthorizationHeaderToken',
                    'BasicAuth',
                    'SudoHeader',
                    'SudoParam',
                    'TOTPHeader',
                    'Token'
                ],
                'endpoint_path': '/repos/{owner}/{repo}/hooks/{id}',
                'operation_id': 'repo_delete_hook',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'owner',
                    'repo',
                    'id',
                ],
                'required': [
                    'owner',
                    'repo',
                    'id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'owner':
                        (str,),
                    'repo':
                        (str,),
                    'id':
                        (int,),
                },
                'attribute_map': {
                    'owner': 'owner',
                    'repo': 'repo',
                    'id': 'id',
                },
                'location_map': {
                    'owner': 'path',
                    'repo': 'path',
                    'id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [],
                'content_type': [],
            },
            api_client=api_client
        )
        self.repo_delete_key_endpoint = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'AccessToken',
                    'AuthorizationHeaderToken',
                    'BasicAuth',
                    'SudoHeader',
                    'SudoParam',
                    'TOTPHeader',
                    'Token'
                ],
                'endpoint_path': '/repos/{owner}/{repo}/keys/{id}',
                'operation_id': 'repo_delete_key',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'owner',
                    'repo',
                    'id',
                ],
                'required': [
                    'owner',
                    'repo',
                    'id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'owner':
                        (str,),
                    'repo':
                        (str,),
                    'id':
                        (int,),
                },
                'attribute_map': {
                    'owner': 'owner',
                    'repo': 'repo',
                    'id': 'id',
                },
                'location_map': {
                    'owner': 'path',
                    'repo': 'path',
                    'id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [],
                'content_type': [],
            },
            api_client=api_client
        )
        self.repo_delete_pull_review_endpoint = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'AccessToken',
                    'AuthorizationHeaderToken',
                    'BasicAuth',
                    'SudoHeader',
                    'SudoParam',
                    'TOTPHeader',
                    'Token'
                ],
                'endpoint_path': '/repos/{owner}/{repo}/pulls/{index}/reviews/{id}',
                'operation_id': 'repo_delete_pull_review',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'owner',
                    'repo',
                    'index',
                    'id',
                ],
                'required': [
                    'owner',
                    'repo',
                    'index',
                    'id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'owner':
                        (str,),
                    'repo':
                        (str,),
                    'index':
                        (int,),
                    'id':
                        (int,),
                },
                'attribute_map': {
                    'owner': 'owner',
                    'repo': 'repo',
                    'index': 'index',
                    'id': 'id',
                },
                'location_map': {
                    'owner': 'path',
                    'repo': 'path',
                    'index': 'path',
                    'id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [],
                'content_type': [],
            },
            api_client=api_client
        )
        self.repo_delete_pull_review_requests_endpoint = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'AccessToken',
                    'AuthorizationHeaderToken',
                    'BasicAuth',
                    'SudoHeader',
                    'SudoParam',
                    'TOTPHeader',
                    'Token'
                ],
                'endpoint_path': '/repos/{owner}/{repo}/pulls/{index}/requested_reviewers',
                'operation_id': 'repo_delete_pull_review_requests',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'owner',
                    'repo',
                    'index',
                    'body',
                ],
                'required': [
                    'owner',
                    'repo',
                    'index',
                    'body',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'owner':
                        (str,),
                    'repo':
                        (str,),
                    'index':
                        (int,),
                    'body':
                        (PullReviewRequestOptions,),
                },
                'attribute_map': {
                    'owner': 'owner',
                    'repo': 'repo',
                    'index': 'index',
                },
                'location_map': {
                    'owner': 'path',
                    'repo': 'path',
                    'index': 'path',
                    'body': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [],
                'content_type': [
                    'application/json',
                    'text/plain'
                ]
            },
            api_client=api_client
        )
        self.repo_delete_push_mirror_endpoint = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'AccessToken',
                    'AuthorizationHeaderToken',
                    'BasicAuth',
                    'SudoHeader',
                    'SudoParam',
                    'TOTPHeader',
                    'Token'
                ],
                'endpoint_path': '/repos/{owner}/{repo}/push_mirrors/{name}',
                'operation_id': 'repo_delete_push_mirror',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'owner',
                    'repo',
                    'name',
                ],
                'required': [
                    'owner',
                    'repo',
                    'name',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'owner':
                        (str,),
                    'repo':
                        (str,),
                    'name':
                        (str,),
                },
                'attribute_map': {
                    'owner': 'owner',
                    'repo': 'repo',
                    'name': 'name',
                },
                'location_map': {
                    'owner': 'path',
                    'repo': 'path',
                    'name': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [],
                'content_type': [],
            },
            api_client=api_client
        )
        self.repo_delete_release_endpoint = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'AccessToken',
                    'AuthorizationHeaderToken',
                    'BasicAuth',
                    'SudoHeader',
                    'SudoParam',
                    'TOTPHeader',
                    'Token'
                ],
                'endpoint_path': '/repos/{owner}/{repo}/releases/{id}',
                'operation_id': 'repo_delete_release',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'owner',
                    'repo',
                    'id',
                ],
                'required': [
                    'owner',
                    'repo',
                    'id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'owner':
                        (str,),
                    'repo':
                        (str,),
                    'id':
                        (int,),
                },
                'attribute_map': {
                    'owner': 'owner',
                    'repo': 'repo',
                    'id': 'id',
                },
                'location_map': {
                    'owner': 'path',
                    'repo': 'path',
                    'id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [],
                'content_type': [],
            },
            api_client=api_client
        )
        self.repo_delete_release_attachment_endpoint = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'AccessToken',
                    'AuthorizationHeaderToken',
                    'BasicAuth',
                    'SudoHeader',
                    'SudoParam',
                    'TOTPHeader',
                    'Token'
                ],
                'endpoint_path': '/repos/{owner}/{repo}/releases/{id}/assets/{attachment_id}',
                'operation_id': 'repo_delete_release_attachment',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'owner',
                    'repo',
                    'id',
                    'attachment_id',
                ],
                'required': [
                    'owner',
                    'repo',
                    'id',
                    'attachment_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'owner':
                        (str,),
                    'repo':
                        (str,),
                    'id':
                        (int,),
                    'attachment_id':
                        (int,),
                },
                'attribute_map': {
                    'owner': 'owner',
                    'repo': 'repo',
                    'id': 'id',
                    'attachment_id': 'attachment_id',
                },
                'location_map': {
                    'owner': 'path',
                    'repo': 'path',
                    'id': 'path',
                    'attachment_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [],
                'content_type': [],
            },
            api_client=api_client
        )
        self.repo_delete_release_by_tag_endpoint = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'AccessToken',
                    'AuthorizationHeaderToken',
                    'BasicAuth',
                    'SudoHeader',
                    'SudoParam',
                    'TOTPHeader',
                    'Token'
                ],
                'endpoint_path': '/repos/{owner}/{repo}/releases/tags/{tag}',
                'operation_id': 'repo_delete_release_by_tag',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'owner',
                    'repo',
                    'tag',
                ],
                'required': [
                    'owner',
                    'repo',
                    'tag',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'owner':
                        (str,),
                    'repo':
                        (str,),
                    'tag':
                        (str,),
                },
                'attribute_map': {
                    'owner': 'owner',
                    'repo': 'repo',
                    'tag': 'tag',
                },
                'location_map': {
                    'owner': 'path',
                    'repo': 'path',
                    'tag': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [],
                'content_type': [],
            },
            api_client=api_client
        )
        self.repo_delete_tag_endpoint = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'AccessToken',
                    'AuthorizationHeaderToken',
                    'BasicAuth',
                    'SudoHeader',
                    'SudoParam',
                    'TOTPHeader',
                    'Token'
                ],
                'endpoint_path': '/repos/{owner}/{repo}/tags/{tag}',
                'operation_id': 'repo_delete_tag',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'owner',
                    'repo',
                    'tag',
                ],
                'required': [
                    'owner',
                    'repo',
                    'tag',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'owner':
                        (str,),
                    'repo':
                        (str,),
                    'tag':
                        (str,),
                },
                'attribute_map': {
                    'owner': 'owner',
                    'repo': 'repo',
                    'tag': 'tag',
                },
                'location_map': {
                    'owner': 'path',
                    'repo': 'path',
                    'tag': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [],
                'content_type': [],
            },
            api_client=api_client
        )
        self.repo_delete_team_endpoint = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'AccessToken',
                    'AuthorizationHeaderToken',
                    'BasicAuth',
                    'SudoHeader',
                    'SudoParam',
                    'TOTPHeader',
                    'Token'
                ],
                'endpoint_path': '/repos/{owner}/{repo}/teams/{team}',
                'operation_id': 'repo_delete_team',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'owner',
                    'repo',
                    'team',
                ],
                'required': [
                    'owner',
                    'repo',
                    'team',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'owner':
                        (str,),
                    'repo':
                        (str,),
                    'team':
                        (str,),
                },
                'attribute_map': {
                    'owner': 'owner',
                    'repo': 'repo',
                    'team': 'team',
                },
                'location_map': {
                    'owner': 'path',
                    'repo': 'path',
                    'team': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [],
                'content_type': [],
            },
            api_client=api_client
        )
        self.repo_delete_topic_endpoint = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'AccessToken',
                    'AuthorizationHeaderToken',
                    'BasicAuth',
                    'SudoHeader',
                    'SudoParam',
                    'TOTPHeader',
                    'Token'
                ],
                'endpoint_path': '/repos/{owner}/{repo}/topics/{topic}',
                'operation_id': 'repo_delete_topic',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'owner',
                    'repo',
                    'topic',
                ],
                'required': [
                    'owner',
                    'repo',
                    'topic',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'owner':
                        (str,),
                    'repo':
                        (str,),
                    'topic':
                        (str,),
                },
                'attribute_map': {
                    'owner': 'owner',
                    'repo': 'repo',
                    'topic': 'topic',
                },
                'location_map': {
                    'owner': 'path',
                    'repo': 'path',
                    'topic': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [],
                'content_type': [],
            },
            api_client=api_client
        )
        self.repo_delete_wiki_page_endpoint = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'AccessToken',
                    'AuthorizationHeaderToken',
                    'BasicAuth',
                    'SudoHeader',
                    'SudoParam',
                    'TOTPHeader',
                    'Token'
                ],
                'endpoint_path': '/repos/{owner}/{repo}/wiki/page/{pageName}',
                'operation_id': 'repo_delete_wiki_page',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'owner',
                    'repo',
                    'page_name',
                ],
                'required': [
                    'owner',
                    'repo',
                    'page_name',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'owner':
                        (str,),
                    'repo':
                        (str,),
                    'page_name':
                        (str,),
                },
                'attribute_map': {
                    'owner': 'owner',
                    'repo': 'repo',
                    'page_name': 'pageName',
                },
                'location_map': {
                    'owner': 'path',
                    'repo': 'path',
                    'page_name': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [],
                'content_type': [],
            },
            api_client=api_client
        )
        self.repo_dismiss_pull_review_endpoint = _Endpoint(
            settings={
                'response_type': (PullReview,),
                'auth': [
                    'AccessToken',
                    'AuthorizationHeaderToken',
                    'BasicAuth',
                    'SudoHeader',
                    'SudoParam',
                    'TOTPHeader',
                    'Token'
                ],
                'endpoint_path': '/repos/{owner}/{repo}/pulls/{index}/reviews/{id}/dismissals',
                'operation_id': 'repo_dismiss_pull_review',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'owner',
                    'repo',
                    'index',
                    'id',
                    'body',
                ],
                'required': [
                    'owner',
                    'repo',
                    'index',
                    'id',
                    'body',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'owner':
                        (str,),
                    'repo':
                        (str,),
                    'index':
                        (int,),
                    'id':
                        (int,),
                    'body':
                        (DismissPullReviewOptions,),
                },
                'attribute_map': {
                    'owner': 'owner',
                    'repo': 'repo',
                    'index': 'index',
                    'id': 'id',
                },
                'location_map': {
                    'owner': 'path',
                    'repo': 'path',
                    'index': 'path',
                    'id': 'path',
                    'body': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json',
                    'text/plain'
                ]
            },
            api_client=api_client
        )
        self.repo_download_commit_diff_or_patch_endpoint = _Endpoint(
            settings={
                'response_type': (str,),
                'auth': [
                    'AccessToken',
                    'AuthorizationHeaderToken',
                    'BasicAuth',
                    'SudoHeader',
                    'SudoParam',
                    'TOTPHeader',
                    'Token'
                ],
                'endpoint_path': '/repos/{owner}/{repo}/git/commits/{sha}.{diffType}',
                'operation_id': 'repo_download_commit_diff_or_patch',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'owner',
                    'repo',
                    'sha',
                    'diff_type',
                ],
                'required': [
                    'owner',
                    'repo',
                    'sha',
                    'diff_type',
                ],
                'nullable': [
                ],
                'enum': [
                    'diff_type',
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                    ('diff_type',): {

                        "DIFF": "diff",
                        "PATCH": "patch"
                    },
                },
                'openapi_types': {
                    'owner':
                        (str,),
                    'repo':
                        (str,),
                    'sha':
                        (str,),
                    'diff_type':
                        (str,),
                },
                'attribute_map': {
                    'owner': 'owner',
                    'repo': 'repo',
                    'sha': 'sha',
                    'diff_type': 'diffType',
                },
                'location_map': {
                    'owner': 'path',
                    'repo': 'path',
                    'sha': 'path',
                    'diff_type': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'text/plain'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.repo_download_pull_diff_or_patch_endpoint = _Endpoint(
            settings={
                'response_type': (str,),
                'auth': [
                    'AccessToken',
                    'AuthorizationHeaderToken',
                    'BasicAuth',
                    'SudoHeader',
                    'SudoParam',
                    'TOTPHeader',
                    'Token'
                ],
                'endpoint_path': '/repos/{owner}/{repo}/pulls/{index}.{diffType}',
                'operation_id': 'repo_download_pull_diff_or_patch',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'owner',
                    'repo',
                    'index',
                    'diff_type',
                    'binary',
                ],
                'required': [
                    'owner',
                    'repo',
                    'index',
                    'diff_type',
                ],
                'nullable': [
                ],
                'enum': [
                    'diff_type',
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                    ('diff_type',): {

                        "DIFF": "diff",
                        "PATCH": "patch"
                    },
                },
                'openapi_types': {
                    'owner':
                        (str,),
                    'repo':
                        (str,),
                    'index':
                        (int,),
                    'diff_type':
                        (str,),
                    'binary':
                        (bool,),
                },
                'attribute_map': {
                    'owner': 'owner',
                    'repo': 'repo',
                    'index': 'index',
                    'diff_type': 'diffType',
                    'binary': 'binary',
                },
                'location_map': {
                    'owner': 'path',
                    'repo': 'path',
                    'index': 'path',
                    'diff_type': 'path',
                    'binary': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'text/plain'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.repo_edit_endpoint = _Endpoint(
            settings={
                'response_type': (Repository,),
                'auth': [
                    'AccessToken',
                    'AuthorizationHeaderToken',
                    'BasicAuth',
                    'SudoHeader',
                    'SudoParam',
                    'TOTPHeader',
                    'Token'
                ],
                'endpoint_path': '/repos/{owner}/{repo}',
                'operation_id': 'repo_edit',
                'http_method': 'PATCH',
                'servers': None,
            },
            params_map={
                'all': [
                    'owner',
                    'repo',
                    'body',
                ],
                'required': [
                    'owner',
                    'repo',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'owner':
                        (str,),
                    'repo':
                        (str,),
                    'body':
                        (EditRepoOption,),
                },
                'attribute_map': {
                    'owner': 'owner',
                    'repo': 'repo',
                },
                'location_map': {
                    'owner': 'path',
                    'repo': 'path',
                    'body': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json',
                    'text/plain'
                ]
            },
            api_client=api_client
        )
        self.repo_edit_branch_protection_endpoint = _Endpoint(
            settings={
                'response_type': (BranchProtection,),
                'auth': [
                    'AccessToken',
                    'AuthorizationHeaderToken',
                    'BasicAuth',
                    'SudoHeader',
                    'SudoParam',
                    'TOTPHeader',
                    'Token'
                ],
                'endpoint_path': '/repos/{owner}/{repo}/branch_protections/{name}',
                'operation_id': 'repo_edit_branch_protection',
                'http_method': 'PATCH',
                'servers': None,
            },
            params_map={
                'all': [
                    'owner',
                    'repo',
                    'name',
                    'body',
                ],
                'required': [
                    'owner',
                    'repo',
                    'name',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'owner':
                        (str,),
                    'repo':
                        (str,),
                    'name':
                        (str,),
                    'body':
                        (EditBranchProtectionOption,),
                },
                'attribute_map': {
                    'owner': 'owner',
                    'repo': 'repo',
                    'name': 'name',
                },
                'location_map': {
                    'owner': 'path',
                    'repo': 'path',
                    'name': 'path',
                    'body': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.repo_edit_git_hook_endpoint = _Endpoint(
            settings={
                'response_type': (GitHook,),
                'auth': [
                    'AccessToken',
                    'AuthorizationHeaderToken',
                    'BasicAuth',
                    'SudoHeader',
                    'SudoParam',
                    'TOTPHeader',
                    'Token'
                ],
                'endpoint_path': '/repos/{owner}/{repo}/hooks/git/{id}',
                'operation_id': 'repo_edit_git_hook',
                'http_method': 'PATCH',
                'servers': None,
            },
            params_map={
                'all': [
                    'owner',
                    'repo',
                    'id',
                    'body',
                ],
                'required': [
                    'owner',
                    'repo',
                    'id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'owner':
                        (str,),
                    'repo':
                        (str,),
                    'id':
                        (str,),
                    'body':
                        (EditGitHookOption,),
                },
                'attribute_map': {
                    'owner': 'owner',
                    'repo': 'repo',
                    'id': 'id',
                },
                'location_map': {
                    'owner': 'path',
                    'repo': 'path',
                    'id': 'path',
                    'body': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json',
                    'text/plain'
                ]
            },
            api_client=api_client
        )
        self.repo_edit_hook_endpoint = _Endpoint(
            settings={
                'response_type': (Hook,),
                'auth': [
                    'AccessToken',
                    'AuthorizationHeaderToken',
                    'BasicAuth',
                    'SudoHeader',
                    'SudoParam',
                    'TOTPHeader',
                    'Token'
                ],
                'endpoint_path': '/repos/{owner}/{repo}/hooks/{id}',
                'operation_id': 'repo_edit_hook',
                'http_method': 'PATCH',
                'servers': None,
            },
            params_map={
                'all': [
                    'owner',
                    'repo',
                    'id',
                    'body',
                ],
                'required': [
                    'owner',
                    'repo',
                    'id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'owner':
                        (str,),
                    'repo':
                        (str,),
                    'id':
                        (int,),
                    'body':
                        (EditHookOption,),
                },
                'attribute_map': {
                    'owner': 'owner',
                    'repo': 'repo',
                    'id': 'id',
                },
                'location_map': {
                    'owner': 'path',
                    'repo': 'path',
                    'id': 'path',
                    'body': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json',
                    'text/plain'
                ]
            },
            api_client=api_client
        )
        self.repo_edit_pull_request_endpoint = _Endpoint(
            settings={
                'response_type': (PullRequest,),
                'auth': [
                    'AccessToken',
                    'AuthorizationHeaderToken',
                    'BasicAuth',
                    'SudoHeader',
                    'SudoParam',
                    'TOTPHeader',
                    'Token'
                ],
                'endpoint_path': '/repos/{owner}/{repo}/pulls/{index}',
                'operation_id': 'repo_edit_pull_request',
                'http_method': 'PATCH',
                'servers': None,
            },
            params_map={
                'all': [
                    'owner',
                    'repo',
                    'index',
                    'body',
                ],
                'required': [
                    'owner',
                    'repo',
                    'index',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'owner':
                        (str,),
                    'repo':
                        (str,),
                    'index':
                        (int,),
                    'body':
                        (EditPullRequestOption,),
                },
                'attribute_map': {
                    'owner': 'owner',
                    'repo': 'repo',
                    'index': 'index',
                },
                'location_map': {
                    'owner': 'path',
                    'repo': 'path',
                    'index': 'path',
                    'body': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.repo_edit_release_endpoint = _Endpoint(
            settings={
                'response_type': (Release,),
                'auth': [
                    'AccessToken',
                    'AuthorizationHeaderToken',
                    'BasicAuth',
                    'SudoHeader',
                    'SudoParam',
                    'TOTPHeader',
                    'Token'
                ],
                'endpoint_path': '/repos/{owner}/{repo}/releases/{id}',
                'operation_id': 'repo_edit_release',
                'http_method': 'PATCH',
                'servers': None,
            },
            params_map={
                'all': [
                    'owner',
                    'repo',
                    'id',
                    'body',
                ],
                'required': [
                    'owner',
                    'repo',
                    'id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'owner':
                        (str,),
                    'repo':
                        (str,),
                    'id':
                        (int,),
                    'body':
                        (EditReleaseOption,),
                },
                'attribute_map': {
                    'owner': 'owner',
                    'repo': 'repo',
                    'id': 'id',
                },
                'location_map': {
                    'owner': 'path',
                    'repo': 'path',
                    'id': 'path',
                    'body': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.repo_edit_release_attachment_endpoint = _Endpoint(
            settings={
                'response_type': (Attachment,),
                'auth': [
                    'AccessToken',
                    'AuthorizationHeaderToken',
                    'BasicAuth',
                    'SudoHeader',
                    'SudoParam',
                    'TOTPHeader',
                    'Token'
                ],
                'endpoint_path': '/repos/{owner}/{repo}/releases/{id}/assets/{attachment_id}',
                'operation_id': 'repo_edit_release_attachment',
                'http_method': 'PATCH',
                'servers': None,
            },
            params_map={
                'all': [
                    'owner',
                    'repo',
                    'id',
                    'attachment_id',
                    'body',
                ],
                'required': [
                    'owner',
                    'repo',
                    'id',
                    'attachment_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'owner':
                        (str,),
                    'repo':
                        (str,),
                    'id':
                        (int,),
                    'attachment_id':
                        (int,),
                    'body':
                        (EditAttachmentOptions,),
                },
                'attribute_map': {
                    'owner': 'owner',
                    'repo': 'repo',
                    'id': 'id',
                    'attachment_id': 'attachment_id',
                },
                'location_map': {
                    'owner': 'path',
                    'repo': 'path',
                    'id': 'path',
                    'attachment_id': 'path',
                    'body': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.repo_edit_wiki_page_endpoint = _Endpoint(
            settings={
                'response_type': (WikiPage,),
                'auth': [
                    'AccessToken',
                    'AuthorizationHeaderToken',
                    'BasicAuth',
                    'SudoHeader',
                    'SudoParam',
                    'TOTPHeader',
                    'Token'
                ],
                'endpoint_path': '/repos/{owner}/{repo}/wiki/page/{pageName}',
                'operation_id': 'repo_edit_wiki_page',
                'http_method': 'PATCH',
                'servers': None,
            },
            params_map={
                'all': [
                    'owner',
                    'repo',
                    'page_name',
                    'body',
                ],
                'required': [
                    'owner',
                    'repo',
                    'page_name',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'owner':
                        (str,),
                    'repo':
                        (str,),
                    'page_name':
                        (str,),
                    'body':
                        (CreateWikiPageOptions,),
                },
                'attribute_map': {
                    'owner': 'owner',
                    'repo': 'repo',
                    'page_name': 'pageName',
                },
                'location_map': {
                    'owner': 'path',
                    'repo': 'path',
                    'page_name': 'path',
                    'body': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json',
                    'text/html'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.repo_get_endpoint = _Endpoint(
            settings={
                'response_type': (Repository,),
                'auth': [
                    'AccessToken',
                    'AuthorizationHeaderToken',
                    'BasicAuth',
                    'SudoHeader',
                    'SudoParam',
                    'TOTPHeader',
                    'Token'
                ],
                'endpoint_path': '/repos/{owner}/{repo}',
                'operation_id': 'repo_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'owner',
                    'repo',
                ],
                'required': [
                    'owner',
                    'repo',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'owner':
                        (str,),
                    'repo':
                        (str,),
                },
                'attribute_map': {
                    'owner': 'owner',
                    'repo': 'repo',
                },
                'location_map': {
                    'owner': 'path',
                    'repo': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.repo_get_all_commits_endpoint = _Endpoint(
            settings={
                'response_type': ([Commit],),
                'auth': [
                    'AccessToken',
                    'AuthorizationHeaderToken',
                    'BasicAuth',
                    'SudoHeader',
                    'SudoParam',
                    'TOTPHeader',
                    'Token'
                ],
                'endpoint_path': '/repos/{owner}/{repo}/commits',
                'operation_id': 'repo_get_all_commits',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'owner',
                    'repo',
                    'sha',
                    'path',
                    'stat',
                    'page',
                    'limit',
                ],
                'required': [
                    'owner',
                    'repo',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'owner':
                        (str,),
                    'repo':
                        (str,),
                    'sha':
                        (str,),
                    'path':
                        (str,),
                    'stat':
                        (bool,),
                    'page':
                        (int,),
                    'limit':
                        (int,),
                },
                'attribute_map': {
                    'owner': 'owner',
                    'repo': 'repo',
                    'sha': 'sha',
                    'path': 'path',
                    'stat': 'stat',
                    'page': 'page',
                    'limit': 'limit',
                },
                'location_map': {
                    'owner': 'path',
                    'repo': 'path',
                    'sha': 'query',
                    'path': 'query',
                    'stat': 'query',
                    'page': 'query',
                    'limit': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.repo_get_archive_endpoint = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'AccessToken',
                    'AuthorizationHeaderToken',
                    'BasicAuth',
                    'SudoHeader',
                    'SudoParam',
                    'TOTPHeader',
                    'Token'
                ],
                'endpoint_path': '/repos/{owner}/{repo}/archive/{archive}',
                'operation_id': 'repo_get_archive',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'owner',
                    'repo',
                    'archive',
                ],
                'required': [
                    'owner',
                    'repo',
                    'archive',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'owner':
                        (str,),
                    'repo':
                        (str,),
                    'archive':
                        (str,),
                },
                'attribute_map': {
                    'owner': 'owner',
                    'repo': 'repo',
                    'archive': 'archive',
                },
                'location_map': {
                    'owner': 'path',
                    'repo': 'path',
                    'archive': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [],
                'content_type': [],
            },
            api_client=api_client
        )
        self.repo_get_assignees_endpoint = _Endpoint(
            settings={
                'response_type': ([User],),
                'auth': [
                    'AccessToken',
                    'AuthorizationHeaderToken',
                    'BasicAuth',
                    'SudoHeader',
                    'SudoParam',
                    'TOTPHeader',
                    'Token'
                ],
                'endpoint_path': '/repos/{owner}/{repo}/assignees',
                'operation_id': 'repo_get_assignees',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'owner',
                    'repo',
                ],
                'required': [
                    'owner',
                    'repo',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'owner':
                        (str,),
                    'repo':
                        (str,),
                },
                'attribute_map': {
                    'owner': 'owner',
                    'repo': 'repo',
                },
                'location_map': {
                    'owner': 'path',
                    'repo': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.repo_get_branch_endpoint = _Endpoint(
            settings={
                'response_type': (Branch,),
                'auth': [
                    'AccessToken',
                    'AuthorizationHeaderToken',
                    'BasicAuth',
                    'SudoHeader',
                    'SudoParam',
                    'TOTPHeader',
                    'Token'
                ],
                'endpoint_path': '/repos/{owner}/{repo}/branches/{branch}',
                'operation_id': 'repo_get_branch',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'owner',
                    'repo',
                    'branch',
                ],
                'required': [
                    'owner',
                    'repo',
                    'branch',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'owner':
                        (str,),
                    'repo':
                        (str,),
                    'branch':
                        (str,),
                },
                'attribute_map': {
                    'owner': 'owner',
                    'repo': 'repo',
                    'branch': 'branch',
                },
                'location_map': {
                    'owner': 'path',
                    'repo': 'path',
                    'branch': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.repo_get_branch_protection_endpoint = _Endpoint(
            settings={
                'response_type': (BranchProtection,),
                'auth': [
                    'AccessToken',
                    'AuthorizationHeaderToken',
                    'BasicAuth',
                    'SudoHeader',
                    'SudoParam',
                    'TOTPHeader',
                    'Token'
                ],
                'endpoint_path': '/repos/{owner}/{repo}/branch_protections/{name}',
                'operation_id': 'repo_get_branch_protection',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'owner',
                    'repo',
                    'name',
                ],
                'required': [
                    'owner',
                    'repo',
                    'name',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'owner':
                        (str,),
                    'repo':
                        (str,),
                    'name':
                        (str,),
                },
                'attribute_map': {
                    'owner': 'owner',
                    'repo': 'repo',
                    'name': 'name',
                },
                'location_map': {
                    'owner': 'path',
                    'repo': 'path',
                    'name': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.repo_get_by_id_endpoint = _Endpoint(
            settings={
                'response_type': (Repository,),
                'auth': [
                    'AccessToken',
                    'AuthorizationHeaderToken',
                    'BasicAuth',
                    'SudoHeader',
                    'SudoParam',
                    'TOTPHeader',
                    'Token'
                ],
                'endpoint_path': '/repositories/{id}',
                'operation_id': 'repo_get_by_id',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'id',
                ],
                'required': [
                    'id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'id':
                        (int,),
                },
                'attribute_map': {
                    'id': 'id',
                },
                'location_map': {
                    'id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.repo_get_combined_status_by_ref_endpoint = _Endpoint(
            settings={
                'response_type': (CombinedStatus,),
                'auth': [
                    'AccessToken',
                    'AuthorizationHeaderToken',
                    'BasicAuth',
                    'SudoHeader',
                    'SudoParam',
                    'TOTPHeader',
                    'Token'
                ],
                'endpoint_path': '/repos/{owner}/{repo}/commits/{ref}/status',
                'operation_id': 'repo_get_combined_status_by_ref',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'owner',
                    'repo',
                    'ref',
                    'page',
                    'limit',
                ],
                'required': [
                    'owner',
                    'repo',
                    'ref',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'owner':
                        (str,),
                    'repo':
                        (str,),
                    'ref':
                        (str,),
                    'page':
                        (int,),
                    'limit':
                        (int,),
                },
                'attribute_map': {
                    'owner': 'owner',
                    'repo': 'repo',
                    'ref': 'ref',
                    'page': 'page',
                    'limit': 'limit',
                },
                'location_map': {
                    'owner': 'path',
                    'repo': 'path',
                    'ref': 'path',
                    'page': 'query',
                    'limit': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.repo_get_contents_endpoint = _Endpoint(
            settings={
                'response_type': (ContentsResponse,),
                'auth': [
                    'AccessToken',
                    'AuthorizationHeaderToken',
                    'BasicAuth',
                    'SudoHeader',
                    'SudoParam',
                    'TOTPHeader',
                    'Token'
                ],
                'endpoint_path': '/repos/{owner}/{repo}/contents/{filepath}',
                'operation_id': 'repo_get_contents',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'owner',
                    'repo',
                    'filepath',
                    'ref',
                ],
                'required': [
                    'owner',
                    'repo',
                    'filepath',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'owner':
                        (str,),
                    'repo':
                        (str,),
                    'filepath':
                        (str,),
                    'ref':
                        (str,),
                },
                'attribute_map': {
                    'owner': 'owner',
                    'repo': 'repo',
                    'filepath': 'filepath',
                    'ref': 'ref',
                },
                'location_map': {
                    'owner': 'path',
                    'repo': 'path',
                    'filepath': 'path',
                    'ref': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.repo_get_contents_list_endpoint = _Endpoint(
            settings={
                'response_type': ([ContentsResponse],),
                'auth': [
                    'AccessToken',
                    'AuthorizationHeaderToken',
                    'BasicAuth',
                    'SudoHeader',
                    'SudoParam',
                    'TOTPHeader',
                    'Token'
                ],
                'endpoint_path': '/repos/{owner}/{repo}/contents',
                'operation_id': 'repo_get_contents_list',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'owner',
                    'repo',
                    'ref',
                ],
                'required': [
                    'owner',
                    'repo',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'owner':
                        (str,),
                    'repo':
                        (str,),
                    'ref':
                        (str,),
                },
                'attribute_map': {
                    'owner': 'owner',
                    'repo': 'repo',
                    'ref': 'ref',
                },
                'location_map': {
                    'owner': 'path',
                    'repo': 'path',
                    'ref': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.repo_get_editor_config_endpoint = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'AccessToken',
                    'AuthorizationHeaderToken',
                    'BasicAuth',
                    'SudoHeader',
                    'SudoParam',
                    'TOTPHeader',
                    'Token'
                ],
                'endpoint_path': '/repos/{owner}/{repo}/editorconfig/{filepath}',
                'operation_id': 'repo_get_editor_config',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'owner',
                    'repo',
                    'filepath',
                    'ref',
                ],
                'required': [
                    'owner',
                    'repo',
                    'filepath',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'owner':
                        (str,),
                    'repo':
                        (str,),
                    'filepath':
                        (str,),
                    'ref':
                        (str,),
                },
                'attribute_map': {
                    'owner': 'owner',
                    'repo': 'repo',
                    'filepath': 'filepath',
                    'ref': 'ref',
                },
                'location_map': {
                    'owner': 'path',
                    'repo': 'path',
                    'filepath': 'path',
                    'ref': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [],
                'content_type': [],
            },
            api_client=api_client
        )
        self.repo_get_git_hook_endpoint = _Endpoint(
            settings={
                'response_type': (GitHook,),
                'auth': [
                    'AccessToken',
                    'AuthorizationHeaderToken',
                    'BasicAuth',
                    'SudoHeader',
                    'SudoParam',
                    'TOTPHeader',
                    'Token'
                ],
                'endpoint_path': '/repos/{owner}/{repo}/hooks/git/{id}',
                'operation_id': 'repo_get_git_hook',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'owner',
                    'repo',
                    'id',
                ],
                'required': [
                    'owner',
                    'repo',
                    'id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'owner':
                        (str,),
                    'repo':
                        (str,),
                    'id':
                        (str,),
                },
                'attribute_map': {
                    'owner': 'owner',
                    'repo': 'repo',
                    'id': 'id',
                },
                'location_map': {
                    'owner': 'path',
                    'repo': 'path',
                    'id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.repo_get_hook_endpoint = _Endpoint(
            settings={
                'response_type': (Hook,),
                'auth': [
                    'AccessToken',
                    'AuthorizationHeaderToken',
                    'BasicAuth',
                    'SudoHeader',
                    'SudoParam',
                    'TOTPHeader',
                    'Token'
                ],
                'endpoint_path': '/repos/{owner}/{repo}/hooks/{id}',
                'operation_id': 'repo_get_hook',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'owner',
                    'repo',
                    'id',
                ],
                'required': [
                    'owner',
                    'repo',
                    'id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'owner':
                        (str,),
                    'repo':
                        (str,),
                    'id':
                        (int,),
                },
                'attribute_map': {
                    'owner': 'owner',
                    'repo': 'repo',
                    'id': 'id',
                },
                'location_map': {
                    'owner': 'path',
                    'repo': 'path',
                    'id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.repo_get_issue_templates_endpoint = _Endpoint(
            settings={
                'response_type': ([IssueTemplate],),
                'auth': [
                    'AccessToken',
                    'AuthorizationHeaderToken',
                    'BasicAuth',
                    'SudoHeader',
                    'SudoParam',
                    'TOTPHeader',
                    'Token'
                ],
                'endpoint_path': '/repos/{owner}/{repo}/issue_templates',
                'operation_id': 'repo_get_issue_templates',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'owner',
                    'repo',
                ],
                'required': [
                    'owner',
                    'repo',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'owner':
                        (str,),
                    'repo':
                        (str,),
                },
                'attribute_map': {
                    'owner': 'owner',
                    'repo': 'repo',
                },
                'location_map': {
                    'owner': 'path',
                    'repo': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.repo_get_key_endpoint = _Endpoint(
            settings={
                'response_type': (DeployKey,),
                'auth': [
                    'AccessToken',
                    'AuthorizationHeaderToken',
                    'BasicAuth',
                    'SudoHeader',
                    'SudoParam',
                    'TOTPHeader',
                    'Token'
                ],
                'endpoint_path': '/repos/{owner}/{repo}/keys/{id}',
                'operation_id': 'repo_get_key',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'owner',
                    'repo',
                    'id',
                ],
                'required': [
                    'owner',
                    'repo',
                    'id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'owner':
                        (str,),
                    'repo':
                        (str,),
                    'id':
                        (int,),
                },
                'attribute_map': {
                    'owner': 'owner',
                    'repo': 'repo',
                    'id': 'id',
                },
                'location_map': {
                    'owner': 'path',
                    'repo': 'path',
                    'id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.repo_get_languages_endpoint = _Endpoint(
            settings={
                'response_type': ({str: (int,)},),
                'auth': [
                    'AccessToken',
                    'AuthorizationHeaderToken',
                    'BasicAuth',
                    'SudoHeader',
                    'SudoParam',
                    'TOTPHeader',
                    'Token'
                ],
                'endpoint_path': '/repos/{owner}/{repo}/languages',
                'operation_id': 'repo_get_languages',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'owner',
                    'repo',
                ],
                'required': [
                    'owner',
                    'repo',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'owner':
                        (str,),
                    'repo':
                        (str,),
                },
                'attribute_map': {
                    'owner': 'owner',
                    'repo': 'repo',
                },
                'location_map': {
                    'owner': 'path',
                    'repo': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.repo_get_note_endpoint = _Endpoint(
            settings={
                'response_type': (Note,),
                'auth': [
                    'AccessToken',
                    'AuthorizationHeaderToken',
                    'BasicAuth',
                    'SudoHeader',
                    'SudoParam',
                    'TOTPHeader',
                    'Token'
                ],
                'endpoint_path': '/repos/{owner}/{repo}/git/notes/{sha}',
                'operation_id': 'repo_get_note',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'owner',
                    'repo',
                    'sha',
                ],
                'required': [
                    'owner',
                    'repo',
                    'sha',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'owner':
                        (str,),
                    'repo':
                        (str,),
                    'sha':
                        (str,),
                },
                'attribute_map': {
                    'owner': 'owner',
                    'repo': 'repo',
                    'sha': 'sha',
                },
                'location_map': {
                    'owner': 'path',
                    'repo': 'path',
                    'sha': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.repo_get_pull_request_endpoint = _Endpoint(
            settings={
                'response_type': (PullRequest,),
                'auth': [
                    'AccessToken',
                    'AuthorizationHeaderToken',
                    'BasicAuth',
                    'SudoHeader',
                    'SudoParam',
                    'TOTPHeader',
                    'Token'
                ],
                'endpoint_path': '/repos/{owner}/{repo}/pulls/{index}',
                'operation_id': 'repo_get_pull_request',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'owner',
                    'repo',
                    'index',
                ],
                'required': [
                    'owner',
                    'repo',
                    'index',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'owner':
                        (str,),
                    'repo':
                        (str,),
                    'index':
                        (int,),
                },
                'attribute_map': {
                    'owner': 'owner',
                    'repo': 'repo',
                    'index': 'index',
                },
                'location_map': {
                    'owner': 'path',
                    'repo': 'path',
                    'index': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.repo_get_pull_request_commits_endpoint = _Endpoint(
            settings={
                'response_type': ([Commit],),
                'auth': [
                    'AccessToken',
                    'AuthorizationHeaderToken',
                    'BasicAuth',
                    'SudoHeader',
                    'SudoParam',
                    'TOTPHeader',
                    'Token'
                ],
                'endpoint_path': '/repos/{owner}/{repo}/pulls/{index}/commits',
                'operation_id': 'repo_get_pull_request_commits',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'owner',
                    'repo',
                    'index',
                    'page',
                    'limit',
                ],
                'required': [
                    'owner',
                    'repo',
                    'index',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'owner':
                        (str,),
                    'repo':
                        (str,),
                    'index':
                        (int,),
                    'page':
                        (int,),
                    'limit':
                        (int,),
                },
                'attribute_map': {
                    'owner': 'owner',
                    'repo': 'repo',
                    'index': 'index',
                    'page': 'page',
                    'limit': 'limit',
                },
                'location_map': {
                    'owner': 'path',
                    'repo': 'path',
                    'index': 'path',
                    'page': 'query',
                    'limit': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.repo_get_pull_request_files_endpoint = _Endpoint(
            settings={
                'response_type': ([ChangedFile],),
                'auth': [
                    'AccessToken',
                    'AuthorizationHeaderToken',
                    'BasicAuth',
                    'SudoHeader',
                    'SudoParam',
                    'TOTPHeader',
                    'Token'
                ],
                'endpoint_path': '/repos/{owner}/{repo}/pulls/{index}/files',
                'operation_id': 'repo_get_pull_request_files',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'owner',
                    'repo',
                    'index',
                    'skip_to',
                    'whitespace',
                    'page',
                    'limit',
                ],
                'required': [
                    'owner',
                    'repo',
                    'index',
                ],
                'nullable': [
                ],
                'enum': [
                    'whitespace',
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                    ('whitespace',): {

                        "IGNORE-ALL": "ignore-all",
                        "IGNORE-CHANGE": "ignore-change",
                        "IGNORE-EOL": "ignore-eol",
                        "SHOW-ALL": "show-all"
                    },
                },
                'openapi_types': {
                    'owner':
                        (str,),
                    'repo':
                        (str,),
                    'index':
                        (int,),
                    'skip_to':
                        (str,),
                    'whitespace':
                        (str,),
                    'page':
                        (int,),
                    'limit':
                        (int,),
                },
                'attribute_map': {
                    'owner': 'owner',
                    'repo': 'repo',
                    'index': 'index',
                    'skip_to': 'skip-to',
                    'whitespace': 'whitespace',
                    'page': 'page',
                    'limit': 'limit',
                },
                'location_map': {
                    'owner': 'path',
                    'repo': 'path',
                    'index': 'path',
                    'skip_to': 'query',
                    'whitespace': 'query',
                    'page': 'query',
                    'limit': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.repo_get_pull_review_endpoint = _Endpoint(
            settings={
                'response_type': (PullReview,),
                'auth': [
                    'AccessToken',
                    'AuthorizationHeaderToken',
                    'BasicAuth',
                    'SudoHeader',
                    'SudoParam',
                    'TOTPHeader',
                    'Token'
                ],
                'endpoint_path': '/repos/{owner}/{repo}/pulls/{index}/reviews/{id}',
                'operation_id': 'repo_get_pull_review',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'owner',
                    'repo',
                    'index',
                    'id',
                ],
                'required': [
                    'owner',
                    'repo',
                    'index',
                    'id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'owner':
                        (str,),
                    'repo':
                        (str,),
                    'index':
                        (int,),
                    'id':
                        (int,),
                },
                'attribute_map': {
                    'owner': 'owner',
                    'repo': 'repo',
                    'index': 'index',
                    'id': 'id',
                },
                'location_map': {
                    'owner': 'path',
                    'repo': 'path',
                    'index': 'path',
                    'id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.repo_get_pull_review_comments_endpoint = _Endpoint(
            settings={
                'response_type': ([PullReviewComment],),
                'auth': [
                    'AccessToken',
                    'AuthorizationHeaderToken',
                    'BasicAuth',
                    'SudoHeader',
                    'SudoParam',
                    'TOTPHeader',
                    'Token'
                ],
                'endpoint_path': '/repos/{owner}/{repo}/pulls/{index}/reviews/{id}/comments',
                'operation_id': 'repo_get_pull_review_comments',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'owner',
                    'repo',
                    'index',
                    'id',
                ],
                'required': [
                    'owner',
                    'repo',
                    'index',
                    'id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'owner':
                        (str,),
                    'repo':
                        (str,),
                    'index':
                        (int,),
                    'id':
                        (int,),
                },
                'attribute_map': {
                    'owner': 'owner',
                    'repo': 'repo',
                    'index': 'index',
                    'id': 'id',
                },
                'location_map': {
                    'owner': 'path',
                    'repo': 'path',
                    'index': 'path',
                    'id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.repo_get_push_mirror_by_remote_name_endpoint = _Endpoint(
            settings={
                'response_type': (PushMirror,),
                'auth': [
                    'AccessToken',
                    'AuthorizationHeaderToken',
                    'BasicAuth',
                    'SudoHeader',
                    'SudoParam',
                    'TOTPHeader',
                    'Token'
                ],
                'endpoint_path': '/repos/{owner}/{repo}/push_mirrors/{name}',
                'operation_id': 'repo_get_push_mirror_by_remote_name',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'owner',
                    'repo',
                    'name',
                ],
                'required': [
                    'owner',
                    'repo',
                    'name',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'owner':
                        (str,),
                    'repo':
                        (str,),
                    'name':
                        (str,),
                },
                'attribute_map': {
                    'owner': 'owner',
                    'repo': 'repo',
                    'name': 'name',
                },
                'location_map': {
                    'owner': 'path',
                    'repo': 'path',
                    'name': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.repo_get_raw_file_endpoint = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'AccessToken',
                    'AuthorizationHeaderToken',
                    'BasicAuth',
                    'SudoHeader',
                    'SudoParam',
                    'TOTPHeader',
                    'Token'
                ],
                'endpoint_path': '/repos/{owner}/{repo}/raw/{filepath}',
                'operation_id': 'repo_get_raw_file',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'owner',
                    'repo',
                    'filepath',
                    'ref',
                ],
                'required': [
                    'owner',
                    'repo',
                    'filepath',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'owner':
                        (str,),
                    'repo':
                        (str,),
                    'filepath':
                        (str,),
                    'ref':
                        (str,),
                },
                'attribute_map': {
                    'owner': 'owner',
                    'repo': 'repo',
                    'filepath': 'filepath',
                    'ref': 'ref',
                },
                'location_map': {
                    'owner': 'path',
                    'repo': 'path',
                    'filepath': 'path',
                    'ref': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [],
                'content_type': [],
            },
            api_client=api_client
        )
        self.repo_get_raw_file_or_lfs_endpoint = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'AccessToken',
                    'AuthorizationHeaderToken',
                    'BasicAuth',
                    'SudoHeader',
                    'SudoParam',
                    'TOTPHeader',
                    'Token'
                ],
                'endpoint_path': '/repos/{owner}/{repo}/media/{filepath}',
                'operation_id': 'repo_get_raw_file_or_lfs',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'owner',
                    'repo',
                    'filepath',
                    'ref',
                ],
                'required': [
                    'owner',
                    'repo',
                    'filepath',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'owner':
                        (str,),
                    'repo':
                        (str,),
                    'filepath':
                        (str,),
                    'ref':
                        (str,),
                },
                'attribute_map': {
                    'owner': 'owner',
                    'repo': 'repo',
                    'filepath': 'filepath',
                    'ref': 'ref',
                },
                'location_map': {
                    'owner': 'path',
                    'repo': 'path',
                    'filepath': 'path',
                    'ref': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [],
                'content_type': [],
            },
            api_client=api_client
        )
        self.repo_get_release_endpoint = _Endpoint(
            settings={
                'response_type': (Release,),
                'auth': [
                    'AccessToken',
                    'AuthorizationHeaderToken',
                    'BasicAuth',
                    'SudoHeader',
                    'SudoParam',
                    'TOTPHeader',
                    'Token'
                ],
                'endpoint_path': '/repos/{owner}/{repo}/releases/{id}',
                'operation_id': 'repo_get_release',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'owner',
                    'repo',
                    'id',
                ],
                'required': [
                    'owner',
                    'repo',
                    'id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'owner':
                        (str,),
                    'repo':
                        (str,),
                    'id':
                        (int,),
                },
                'attribute_map': {
                    'owner': 'owner',
                    'repo': 'repo',
                    'id': 'id',
                },
                'location_map': {
                    'owner': 'path',
                    'repo': 'path',
                    'id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.repo_get_release_attachment_endpoint = _Endpoint(
            settings={
                'response_type': (Attachment,),
                'auth': [
                    'AccessToken',
                    'AuthorizationHeaderToken',
                    'BasicAuth',
                    'SudoHeader',
                    'SudoParam',
                    'TOTPHeader',
                    'Token'
                ],
                'endpoint_path': '/repos/{owner}/{repo}/releases/{id}/assets/{attachment_id}',
                'operation_id': 'repo_get_release_attachment',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'owner',
                    'repo',
                    'id',
                    'attachment_id',
                ],
                'required': [
                    'owner',
                    'repo',
                    'id',
                    'attachment_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'owner':
                        (str,),
                    'repo':
                        (str,),
                    'id':
                        (int,),
                    'attachment_id':
                        (int,),
                },
                'attribute_map': {
                    'owner': 'owner',
                    'repo': 'repo',
                    'id': 'id',
                    'attachment_id': 'attachment_id',
                },
                'location_map': {
                    'owner': 'path',
                    'repo': 'path',
                    'id': 'path',
                    'attachment_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.repo_get_release_by_tag_endpoint = _Endpoint(
            settings={
                'response_type': (Release,),
                'auth': [
                    'AccessToken',
                    'AuthorizationHeaderToken',
                    'BasicAuth',
                    'SudoHeader',
                    'SudoParam',
                    'TOTPHeader',
                    'Token'
                ],
                'endpoint_path': '/repos/{owner}/{repo}/releases/tags/{tag}',
                'operation_id': 'repo_get_release_by_tag',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'owner',
                    'repo',
                    'tag',
                ],
                'required': [
                    'owner',
                    'repo',
                    'tag',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'owner':
                        (str,),
                    'repo':
                        (str,),
                    'tag':
                        (str,),
                },
                'attribute_map': {
                    'owner': 'owner',
                    'repo': 'repo',
                    'tag': 'tag',
                },
                'location_map': {
                    'owner': 'path',
                    'repo': 'path',
                    'tag': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.repo_get_repo_permissions_endpoint = _Endpoint(
            settings={
                'response_type': (RepoCollaboratorPermission,),
                'auth': [
                    'AccessToken',
                    'AuthorizationHeaderToken',
                    'BasicAuth',
                    'SudoHeader',
                    'SudoParam',
                    'TOTPHeader',
                    'Token'
                ],
                'endpoint_path': '/repos/{owner}/{repo}/collaborators/{collaborator}/permission',
                'operation_id': 'repo_get_repo_permissions',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'owner',
                    'repo',
                    'collaborator',
                ],
                'required': [
                    'owner',
                    'repo',
                    'collaborator',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'owner':
                        (str,),
                    'repo':
                        (str,),
                    'collaborator':
                        (str,),
                },
                'attribute_map': {
                    'owner': 'owner',
                    'repo': 'repo',
                    'collaborator': 'collaborator',
                },
                'location_map': {
                    'owner': 'path',
                    'repo': 'path',
                    'collaborator': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.repo_get_reviewers_endpoint = _Endpoint(
            settings={
                'response_type': ([User],),
                'auth': [
                    'AccessToken',
                    'AuthorizationHeaderToken',
                    'BasicAuth',
                    'SudoHeader',
                    'SudoParam',
                    'TOTPHeader',
                    'Token'
                ],
                'endpoint_path': '/repos/{owner}/{repo}/reviewers',
                'operation_id': 'repo_get_reviewers',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'owner',
                    'repo',
                ],
                'required': [
                    'owner',
                    'repo',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'owner':
                        (str,),
                    'repo':
                        (str,),
                },
                'attribute_map': {
                    'owner': 'owner',
                    'repo': 'repo',
                },
                'location_map': {
                    'owner': 'path',
                    'repo': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.repo_get_single_commit_endpoint = _Endpoint(
            settings={
                'response_type': (Commit,),
                'auth': [
                    'AccessToken',
                    'AuthorizationHeaderToken',
                    'BasicAuth',
                    'SudoHeader',
                    'SudoParam',
                    'TOTPHeader',
                    'Token'
                ],
                'endpoint_path': '/repos/{owner}/{repo}/git/commits/{sha}',
                'operation_id': 'repo_get_single_commit',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'owner',
                    'repo',
                    'sha',
                ],
                'required': [
                    'owner',
                    'repo',
                    'sha',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'owner':
                        (str,),
                    'repo':
                        (str,),
                    'sha':
                        (str,),
                },
                'attribute_map': {
                    'owner': 'owner',
                    'repo': 'repo',
                    'sha': 'sha',
                },
                'location_map': {
                    'owner': 'path',
                    'repo': 'path',
                    'sha': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.repo_get_tag_endpoint = _Endpoint(
            settings={
                'response_type': (Tag,),
                'auth': [
                    'AccessToken',
                    'AuthorizationHeaderToken',
                    'BasicAuth',
                    'SudoHeader',
                    'SudoParam',
                    'TOTPHeader',
                    'Token'
                ],
                'endpoint_path': '/repos/{owner}/{repo}/tags/{tag}',
                'operation_id': 'repo_get_tag',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'owner',
                    'repo',
                    'tag',
                ],
                'required': [
                    'owner',
                    'repo',
                    'tag',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'owner':
                        (str,),
                    'repo':
                        (str,),
                    'tag':
                        (str,),
                },
                'attribute_map': {
                    'owner': 'owner',
                    'repo': 'repo',
                    'tag': 'tag',
                },
                'location_map': {
                    'owner': 'path',
                    'repo': 'path',
                    'tag': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.repo_get_wiki_page_endpoint = _Endpoint(
            settings={
                'response_type': (WikiPage,),
                'auth': [
                    'AccessToken',
                    'AuthorizationHeaderToken',
                    'BasicAuth',
                    'SudoHeader',
                    'SudoParam',
                    'TOTPHeader',
                    'Token'
                ],
                'endpoint_path': '/repos/{owner}/{repo}/wiki/page/{pageName}',
                'operation_id': 'repo_get_wiki_page',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'owner',
                    'repo',
                    'page_name',
                ],
                'required': [
                    'owner',
                    'repo',
                    'page_name',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'owner':
                        (str,),
                    'repo':
                        (str,),
                    'page_name':
                        (str,),
                },
                'attribute_map': {
                    'owner': 'owner',
                    'repo': 'repo',
                    'page_name': 'pageName',
                },
                'location_map': {
                    'owner': 'path',
                    'repo': 'path',
                    'page_name': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.repo_get_wiki_page_revisions_endpoint = _Endpoint(
            settings={
                'response_type': (WikiCommitList,),
                'auth': [
                    'AccessToken',
                    'AuthorizationHeaderToken',
                    'BasicAuth',
                    'SudoHeader',
                    'SudoParam',
                    'TOTPHeader',
                    'Token'
                ],
                'endpoint_path': '/repos/{owner}/{repo}/wiki/revisions/{pageName}',
                'operation_id': 'repo_get_wiki_page_revisions',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'owner',
                    'repo',
                    'page_name',
                    'page',
                ],
                'required': [
                    'owner',
                    'repo',
                    'page_name',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'owner':
                        (str,),
                    'repo':
                        (str,),
                    'page_name':
                        (str,),
                    'page':
                        (int,),
                },
                'attribute_map': {
                    'owner': 'owner',
                    'repo': 'repo',
                    'page_name': 'pageName',
                    'page': 'page',
                },
                'location_map': {
                    'owner': 'path',
                    'repo': 'path',
                    'page_name': 'path',
                    'page': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.repo_get_wiki_pages_endpoint = _Endpoint(
            settings={
                'response_type': ([WikiPageMetaData],),
                'auth': [
                    'AccessToken',
                    'AuthorizationHeaderToken',
                    'BasicAuth',
                    'SudoHeader',
                    'SudoParam',
                    'TOTPHeader',
                    'Token'
                ],
                'endpoint_path': '/repos/{owner}/{repo}/wiki/pages',
                'operation_id': 'repo_get_wiki_pages',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'owner',
                    'repo',
                    'page',
                    'limit',
                ],
                'required': [
                    'owner',
                    'repo',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'owner':
                        (str,),
                    'repo':
                        (str,),
                    'page':
                        (int,),
                    'limit':
                        (int,),
                },
                'attribute_map': {
                    'owner': 'owner',
                    'repo': 'repo',
                    'page': 'page',
                    'limit': 'limit',
                },
                'location_map': {
                    'owner': 'path',
                    'repo': 'path',
                    'page': 'query',
                    'limit': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.repo_list_all_git_refs_endpoint = _Endpoint(
            settings={
                'response_type': ([Reference],),
                'auth': [
                    'AccessToken',
                    'AuthorizationHeaderToken',
                    'BasicAuth',
                    'SudoHeader',
                    'SudoParam',
                    'TOTPHeader',
                    'Token'
                ],
                'endpoint_path': '/repos/{owner}/{repo}/git/refs',
                'operation_id': 'repo_list_all_git_refs',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'owner',
                    'repo',
                ],
                'required': [
                    'owner',
                    'repo',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'owner':
                        (str,),
                    'repo':
                        (str,),
                },
                'attribute_map': {
                    'owner': 'owner',
                    'repo': 'repo',
                },
                'location_map': {
                    'owner': 'path',
                    'repo': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.repo_list_branch_protection_endpoint = _Endpoint(
            settings={
                'response_type': ([BranchProtection],),
                'auth': [
                    'AccessToken',
                    'AuthorizationHeaderToken',
                    'BasicAuth',
                    'SudoHeader',
                    'SudoParam',
                    'TOTPHeader',
                    'Token'
                ],
                'endpoint_path': '/repos/{owner}/{repo}/branch_protections',
                'operation_id': 'repo_list_branch_protection',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'owner',
                    'repo',
                ],
                'required': [
                    'owner',
                    'repo',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'owner':
                        (str,),
                    'repo':
                        (str,),
                },
                'attribute_map': {
                    'owner': 'owner',
                    'repo': 'repo',
                },
                'location_map': {
                    'owner': 'path',
                    'repo': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.repo_list_branches_endpoint = _Endpoint(
            settings={
                'response_type': ([Branch],),
                'auth': [
                    'AccessToken',
                    'AuthorizationHeaderToken',
                    'BasicAuth',
                    'SudoHeader',
                    'SudoParam',
                    'TOTPHeader',
                    'Token'
                ],
                'endpoint_path': '/repos/{owner}/{repo}/branches',
                'operation_id': 'repo_list_branches',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'owner',
                    'repo',
                    'page',
                    'limit',
                ],
                'required': [
                    'owner',
                    'repo',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'owner':
                        (str,),
                    'repo':
                        (str,),
                    'page':
                        (int,),
                    'limit':
                        (int,),
                },
                'attribute_map': {
                    'owner': 'owner',
                    'repo': 'repo',
                    'page': 'page',
                    'limit': 'limit',
                },
                'location_map': {
                    'owner': 'path',
                    'repo': 'path',
                    'page': 'query',
                    'limit': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.repo_list_collaborators_endpoint = _Endpoint(
            settings={
                'response_type': ([User],),
                'auth': [
                    'AccessToken',
                    'AuthorizationHeaderToken',
                    'BasicAuth',
                    'SudoHeader',
                    'SudoParam',
                    'TOTPHeader',
                    'Token'
                ],
                'endpoint_path': '/repos/{owner}/{repo}/collaborators',
                'operation_id': 'repo_list_collaborators',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'owner',
                    'repo',
                    'page',
                    'limit',
                ],
                'required': [
                    'owner',
                    'repo',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'owner':
                        (str,),
                    'repo':
                        (str,),
                    'page':
                        (int,),
                    'limit':
                        (int,),
                },
                'attribute_map': {
                    'owner': 'owner',
                    'repo': 'repo',
                    'page': 'page',
                    'limit': 'limit',
                },
                'location_map': {
                    'owner': 'path',
                    'repo': 'path',
                    'page': 'query',
                    'limit': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.repo_list_git_hooks_endpoint = _Endpoint(
            settings={
                'response_type': ([GitHook],),
                'auth': [
                    'AccessToken',
                    'AuthorizationHeaderToken',
                    'BasicAuth',
                    'SudoHeader',
                    'SudoParam',
                    'TOTPHeader',
                    'Token'
                ],
                'endpoint_path': '/repos/{owner}/{repo}/hooks/git',
                'operation_id': 'repo_list_git_hooks',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'owner',
                    'repo',
                ],
                'required': [
                    'owner',
                    'repo',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'owner':
                        (str,),
                    'repo':
                        (str,),
                },
                'attribute_map': {
                    'owner': 'owner',
                    'repo': 'repo',
                },
                'location_map': {
                    'owner': 'path',
                    'repo': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.repo_list_git_refs_endpoint = _Endpoint(
            settings={
                'response_type': ([Reference],),
                'auth': [
                    'AccessToken',
                    'AuthorizationHeaderToken',
                    'BasicAuth',
                    'SudoHeader',
                    'SudoParam',
                    'TOTPHeader',
                    'Token'
                ],
                'endpoint_path': '/repos/{owner}/{repo}/git/refs/{ref}',
                'operation_id': 'repo_list_git_refs',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'owner',
                    'repo',
                    'ref',
                ],
                'required': [
                    'owner',
                    'repo',
                    'ref',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'owner':
                        (str,),
                    'repo':
                        (str,),
                    'ref':
                        (str,),
                },
                'attribute_map': {
                    'owner': 'owner',
                    'repo': 'repo',
                    'ref': 'ref',
                },
                'location_map': {
                    'owner': 'path',
                    'repo': 'path',
                    'ref': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.repo_list_hooks_endpoint = _Endpoint(
            settings={
                'response_type': ([Hook],),
                'auth': [
                    'AccessToken',
                    'AuthorizationHeaderToken',
                    'BasicAuth',
                    'SudoHeader',
                    'SudoParam',
                    'TOTPHeader',
                    'Token'
                ],
                'endpoint_path': '/repos/{owner}/{repo}/hooks',
                'operation_id': 'repo_list_hooks',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'owner',
                    'repo',
                    'page',
                    'limit',
                ],
                'required': [
                    'owner',
                    'repo',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'owner':
                        (str,),
                    'repo':
                        (str,),
                    'page':
                        (int,),
                    'limit':
                        (int,),
                },
                'attribute_map': {
                    'owner': 'owner',
                    'repo': 'repo',
                    'page': 'page',
                    'limit': 'limit',
                },
                'location_map': {
                    'owner': 'path',
                    'repo': 'path',
                    'page': 'query',
                    'limit': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.repo_list_keys_endpoint = _Endpoint(
            settings={
                'response_type': ([DeployKey],),
                'auth': [
                    'AccessToken',
                    'AuthorizationHeaderToken',
                    'BasicAuth',
                    'SudoHeader',
                    'SudoParam',
                    'TOTPHeader',
                    'Token'
                ],
                'endpoint_path': '/repos/{owner}/{repo}/keys',
                'operation_id': 'repo_list_keys',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'owner',
                    'repo',
                    'key_id',
                    'fingerprint',
                    'page',
                    'limit',
                ],
                'required': [
                    'owner',
                    'repo',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'owner':
                        (str,),
                    'repo':
                        (str,),
                    'key_id':
                        (int,),
                    'fingerprint':
                        (str,),
                    'page':
                        (int,),
                    'limit':
                        (int,),
                },
                'attribute_map': {
                    'owner': 'owner',
                    'repo': 'repo',
                    'key_id': 'key_id',
                    'fingerprint': 'fingerprint',
                    'page': 'page',
                    'limit': 'limit',
                },
                'location_map': {
                    'owner': 'path',
                    'repo': 'path',
                    'key_id': 'query',
                    'fingerprint': 'query',
                    'page': 'query',
                    'limit': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.repo_list_pull_requests_endpoint = _Endpoint(
            settings={
                'response_type': ([PullRequest],),
                'auth': [
                    'AccessToken',
                    'AuthorizationHeaderToken',
                    'BasicAuth',
                    'SudoHeader',
                    'SudoParam',
                    'TOTPHeader',
                    'Token'
                ],
                'endpoint_path': '/repos/{owner}/{repo}/pulls',
                'operation_id': 'repo_list_pull_requests',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'owner',
                    'repo',
                    'state',
                    'sort',
                    'milestone',
                    'labels',
                    'page',
                    'limit',
                ],
                'required': [
                    'owner',
                    'repo',
                ],
                'nullable': [
                ],
                'enum': [
                    'state',
                    'sort',
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                    ('state',): {

                        "CLOSED": "closed",
                        "OPEN": "open",
                        "ALL": "all"
                    },
                    ('sort',): {

                        "OLDEST": "oldest",
                        "RECENTUPDATE": "recentupdate",
                        "LEASTUPDATE": "leastupdate",
                        "MOSTCOMMENT": "mostcomment",
                        "LEASTCOMMENT": "leastcomment",
                        "PRIORITY": "priority"
                    },
                },
                'openapi_types': {
                    'owner':
                        (str,),
                    'repo':
                        (str,),
                    'state':
                        (str,),
                    'sort':
                        (str,),
                    'milestone':
                        (int,),
                    'labels':
                        ([int],),
                    'page':
                        (int,),
                    'limit':
                        (int,),
                },
                'attribute_map': {
                    'owner': 'owner',
                    'repo': 'repo',
                    'state': 'state',
                    'sort': 'sort',
                    'milestone': 'milestone',
                    'labels': 'labels',
                    'page': 'page',
                    'limit': 'limit',
                },
                'location_map': {
                    'owner': 'path',
                    'repo': 'path',
                    'state': 'query',
                    'sort': 'query',
                    'milestone': 'query',
                    'labels': 'query',
                    'page': 'query',
                    'limit': 'query',
                },
                'collection_format_map': {
                    'labels': 'multi',
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.repo_list_pull_reviews_endpoint = _Endpoint(
            settings={
                'response_type': ([PullReview],),
                'auth': [
                    'AccessToken',
                    'AuthorizationHeaderToken',
                    'BasicAuth',
                    'SudoHeader',
                    'SudoParam',
                    'TOTPHeader',
                    'Token'
                ],
                'endpoint_path': '/repos/{owner}/{repo}/pulls/{index}/reviews',
                'operation_id': 'repo_list_pull_reviews',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'owner',
                    'repo',
                    'index',
                    'page',
                    'limit',
                ],
                'required': [
                    'owner',
                    'repo',
                    'index',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'owner':
                        (str,),
                    'repo':
                        (str,),
                    'index':
                        (int,),
                    'page':
                        (int,),
                    'limit':
                        (int,),
                },
                'attribute_map': {
                    'owner': 'owner',
                    'repo': 'repo',
                    'index': 'index',
                    'page': 'page',
                    'limit': 'limit',
                },
                'location_map': {
                    'owner': 'path',
                    'repo': 'path',
                    'index': 'path',
                    'page': 'query',
                    'limit': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.repo_list_push_mirrors_endpoint = _Endpoint(
            settings={
                'response_type': ([PushMirror],),
                'auth': [
                    'AccessToken',
                    'AuthorizationHeaderToken',
                    'BasicAuth',
                    'SudoHeader',
                    'SudoParam',
                    'TOTPHeader',
                    'Token'
                ],
                'endpoint_path': '/repos/{owner}/{repo}/push_mirrors',
                'operation_id': 'repo_list_push_mirrors',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'owner',
                    'repo',
                    'page',
                    'limit',
                ],
                'required': [
                    'owner',
                    'repo',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'owner':
                        (str,),
                    'repo':
                        (str,),
                    'page':
                        (int,),
                    'limit':
                        (int,),
                },
                'attribute_map': {
                    'owner': 'owner',
                    'repo': 'repo',
                    'page': 'page',
                    'limit': 'limit',
                },
                'location_map': {
                    'owner': 'path',
                    'repo': 'path',
                    'page': 'query',
                    'limit': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.repo_list_release_attachments_endpoint = _Endpoint(
            settings={
                'response_type': ([Attachment],),
                'auth': [
                    'AccessToken',
                    'AuthorizationHeaderToken',
                    'BasicAuth',
                    'SudoHeader',
                    'SudoParam',
                    'TOTPHeader',
                    'Token'
                ],
                'endpoint_path': '/repos/{owner}/{repo}/releases/{id}/assets',
                'operation_id': 'repo_list_release_attachments',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'owner',
                    'repo',
                    'id',
                ],
                'required': [
                    'owner',
                    'repo',
                    'id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'owner':
                        (str,),
                    'repo':
                        (str,),
                    'id':
                        (int,),
                },
                'attribute_map': {
                    'owner': 'owner',
                    'repo': 'repo',
                    'id': 'id',
                },
                'location_map': {
                    'owner': 'path',
                    'repo': 'path',
                    'id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.repo_list_releases_endpoint = _Endpoint(
            settings={
                'response_type': ([Release],),
                'auth': [
                    'AccessToken',
                    'AuthorizationHeaderToken',
                    'BasicAuth',
                    'SudoHeader',
                    'SudoParam',
                    'TOTPHeader',
                    'Token'
                ],
                'endpoint_path': '/repos/{owner}/{repo}/releases',
                'operation_id': 'repo_list_releases',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'owner',
                    'repo',
                    'draft',
                    'pre_release',
                    'per_page',
                    'page',
                    'limit',
                ],
                'required': [
                    'owner',
                    'repo',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'owner':
                        (str,),
                    'repo':
                        (str,),
                    'draft':
                        (bool,),
                    'pre_release':
                        (bool,),
                    'per_page':
                        (int,),
                    'page':
                        (int,),
                    'limit':
                        (int,),
                },
                'attribute_map': {
                    'owner': 'owner',
                    'repo': 'repo',
                    'draft': 'draft',
                    'pre_release': 'pre-release',
                    'per_page': 'per_page',
                    'page': 'page',
                    'limit': 'limit',
                },
                'location_map': {
                    'owner': 'path',
                    'repo': 'path',
                    'draft': 'query',
                    'pre_release': 'query',
                    'per_page': 'query',
                    'page': 'query',
                    'limit': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.repo_list_stargazers_endpoint = _Endpoint(
            settings={
                'response_type': ([User],),
                'auth': [
                    'AccessToken',
                    'AuthorizationHeaderToken',
                    'BasicAuth',
                    'SudoHeader',
                    'SudoParam',
                    'TOTPHeader',
                    'Token'
                ],
                'endpoint_path': '/repos/{owner}/{repo}/stargazers',
                'operation_id': 'repo_list_stargazers',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'owner',
                    'repo',
                    'page',
                    'limit',
                ],
                'required': [
                    'owner',
                    'repo',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'owner':
                        (str,),
                    'repo':
                        (str,),
                    'page':
                        (int,),
                    'limit':
                        (int,),
                },
                'attribute_map': {
                    'owner': 'owner',
                    'repo': 'repo',
                    'page': 'page',
                    'limit': 'limit',
                },
                'location_map': {
                    'owner': 'path',
                    'repo': 'path',
                    'page': 'query',
                    'limit': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.repo_list_statuses_endpoint = _Endpoint(
            settings={
                'response_type': ([CommitStatus],),
                'auth': [
                    'AccessToken',
                    'AuthorizationHeaderToken',
                    'BasicAuth',
                    'SudoHeader',
                    'SudoParam',
                    'TOTPHeader',
                    'Token'
                ],
                'endpoint_path': '/repos/{owner}/{repo}/statuses/{sha}',
                'operation_id': 'repo_list_statuses',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'owner',
                    'repo',
                    'sha',
                    'sort',
                    'state',
                    'page',
                    'limit',
                ],
                'required': [
                    'owner',
                    'repo',
                    'sha',
                ],
                'nullable': [
                ],
                'enum': [
                    'sort',
                    'state',
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                    ('sort',): {

                        "OLDEST": "oldest",
                        "RECENTUPDATE": "recentupdate",
                        "LEASTUPDATE": "leastupdate",
                        "LEASTINDEX": "leastindex",
                        "HIGHESTINDEX": "highestindex"
                    },
                    ('state',): {

                        "PENDING": "pending",
                        "SUCCESS": "success",
                        "ERROR": "error",
                        "FAILURE": "failure",
                        "WARNING": "warning"
                    },
                },
                'openapi_types': {
                    'owner':
                        (str,),
                    'repo':
                        (str,),
                    'sha':
                        (str,),
                    'sort':
                        (str,),
                    'state':
                        (str,),
                    'page':
                        (int,),
                    'limit':
                        (int,),
                },
                'attribute_map': {
                    'owner': 'owner',
                    'repo': 'repo',
                    'sha': 'sha',
                    'sort': 'sort',
                    'state': 'state',
                    'page': 'page',
                    'limit': 'limit',
                },
                'location_map': {
                    'owner': 'path',
                    'repo': 'path',
                    'sha': 'path',
                    'sort': 'query',
                    'state': 'query',
                    'page': 'query',
                    'limit': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.repo_list_statuses_by_ref_endpoint = _Endpoint(
            settings={
                'response_type': ([CommitStatus],),
                'auth': [
                    'AccessToken',
                    'AuthorizationHeaderToken',
                    'BasicAuth',
                    'SudoHeader',
                    'SudoParam',
                    'TOTPHeader',
                    'Token'
                ],
                'endpoint_path': '/repos/{owner}/{repo}/commits/{ref}/statuses',
                'operation_id': 'repo_list_statuses_by_ref',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'owner',
                    'repo',
                    'ref',
                    'sort',
                    'state',
                    'page',
                    'limit',
                ],
                'required': [
                    'owner',
                    'repo',
                    'ref',
                ],
                'nullable': [
                ],
                'enum': [
                    'sort',
                    'state',
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                    ('sort',): {

                        "OLDEST": "oldest",
                        "RECENTUPDATE": "recentupdate",
                        "LEASTUPDATE": "leastupdate",
                        "LEASTINDEX": "leastindex",
                        "HIGHESTINDEX": "highestindex"
                    },
                    ('state',): {

                        "PENDING": "pending",
                        "SUCCESS": "success",
                        "ERROR": "error",
                        "FAILURE": "failure",
                        "WARNING": "warning"
                    },
                },
                'openapi_types': {
                    'owner':
                        (str,),
                    'repo':
                        (str,),
                    'ref':
                        (str,),
                    'sort':
                        (str,),
                    'state':
                        (str,),
                    'page':
                        (int,),
                    'limit':
                        (int,),
                },
                'attribute_map': {
                    'owner': 'owner',
                    'repo': 'repo',
                    'ref': 'ref',
                    'sort': 'sort',
                    'state': 'state',
                    'page': 'page',
                    'limit': 'limit',
                },
                'location_map': {
                    'owner': 'path',
                    'repo': 'path',
                    'ref': 'path',
                    'sort': 'query',
                    'state': 'query',
                    'page': 'query',
                    'limit': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.repo_list_subscribers_endpoint = _Endpoint(
            settings={
                'response_type': ([User],),
                'auth': [
                    'AccessToken',
                    'AuthorizationHeaderToken',
                    'BasicAuth',
                    'SudoHeader',
                    'SudoParam',
                    'TOTPHeader',
                    'Token'
                ],
                'endpoint_path': '/repos/{owner}/{repo}/subscribers',
                'operation_id': 'repo_list_subscribers',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'owner',
                    'repo',
                    'page',
                    'limit',
                ],
                'required': [
                    'owner',
                    'repo',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'owner':
                        (str,),
                    'repo':
                        (str,),
                    'page':
                        (int,),
                    'limit':
                        (int,),
                },
                'attribute_map': {
                    'owner': 'owner',
                    'repo': 'repo',
                    'page': 'page',
                    'limit': 'limit',
                },
                'location_map': {
                    'owner': 'path',
                    'repo': 'path',
                    'page': 'query',
                    'limit': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.repo_list_tags_endpoint = _Endpoint(
            settings={
                'response_type': ([Tag],),
                'auth': [
                    'AccessToken',
                    'AuthorizationHeaderToken',
                    'BasicAuth',
                    'SudoHeader',
                    'SudoParam',
                    'TOTPHeader',
                    'Token'
                ],
                'endpoint_path': '/repos/{owner}/{repo}/tags',
                'operation_id': 'repo_list_tags',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'owner',
                    'repo',
                    'page',
                    'limit',
                ],
                'required': [
                    'owner',
                    'repo',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'owner':
                        (str,),
                    'repo':
                        (str,),
                    'page':
                        (int,),
                    'limit':
                        (int,),
                },
                'attribute_map': {
                    'owner': 'owner',
                    'repo': 'repo',
                    'page': 'page',
                    'limit': 'limit',
                },
                'location_map': {
                    'owner': 'path',
                    'repo': 'path',
                    'page': 'query',
                    'limit': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.repo_list_teams_endpoint = _Endpoint(
            settings={
                'response_type': ([Team],),
                'auth': [
                    'AccessToken',
                    'AuthorizationHeaderToken',
                    'BasicAuth',
                    'SudoHeader',
                    'SudoParam',
                    'TOTPHeader',
                    'Token'
                ],
                'endpoint_path': '/repos/{owner}/{repo}/teams',
                'operation_id': 'repo_list_teams',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'owner',
                    'repo',
                ],
                'required': [
                    'owner',
                    'repo',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'owner':
                        (str,),
                    'repo':
                        (str,),
                },
                'attribute_map': {
                    'owner': 'owner',
                    'repo': 'repo',
                },
                'location_map': {
                    'owner': 'path',
                    'repo': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.repo_list_topics_endpoint = _Endpoint(
            settings={
                'response_type': (TopicName,),
                'auth': [
                    'AccessToken',
                    'AuthorizationHeaderToken',
                    'BasicAuth',
                    'SudoHeader',
                    'SudoParam',
                    'TOTPHeader',
                    'Token'
                ],
                'endpoint_path': '/repos/{owner}/{repo}/topics',
                'operation_id': 'repo_list_topics',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'owner',
                    'repo',
                    'page',
                    'limit',
                ],
                'required': [
                    'owner',
                    'repo',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'owner':
                        (str,),
                    'repo':
                        (str,),
                    'page':
                        (int,),
                    'limit':
                        (int,),
                },
                'attribute_map': {
                    'owner': 'owner',
                    'repo': 'repo',
                    'page': 'page',
                    'limit': 'limit',
                },
                'location_map': {
                    'owner': 'path',
                    'repo': 'path',
                    'page': 'query',
                    'limit': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.repo_merge_pull_request_endpoint = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'AccessToken',
                    'AuthorizationHeaderToken',
                    'BasicAuth',
                    'SudoHeader',
                    'SudoParam',
                    'TOTPHeader',
                    'Token'
                ],
                'endpoint_path': '/repos/{owner}/{repo}/pulls/{index}/merge',
                'operation_id': 'repo_merge_pull_request',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'owner',
                    'repo',
                    'index',
                    'body',
                ],
                'required': [
                    'owner',
                    'repo',
                    'index',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'owner':
                        (str,),
                    'repo':
                        (str,),
                    'index':
                        (int,),
                    'body':
                        (MergePullRequestOption,),
                },
                'attribute_map': {
                    'owner': 'owner',
                    'repo': 'repo',
                    'index': 'index',
                },
                'location_map': {
                    'owner': 'path',
                    'repo': 'path',
                    'index': 'path',
                    'body': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [],
                'content_type': [
                    'application/json',
                    'text/plain'
                ]
            },
            api_client=api_client
        )
        self.repo_migrate_endpoint = _Endpoint(
            settings={
                'response_type': (Repository,),
                'auth': [
                    'AccessToken',
                    'AuthorizationHeaderToken',
                    'BasicAuth',
                    'SudoHeader',
                    'SudoParam',
                    'TOTPHeader',
                    'Token'
                ],
                'endpoint_path': '/repos/migrate',
                'operation_id': 'repo_migrate',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'body',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'body':
                        (MigrateRepoOptions,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'body': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.repo_mirror_sync_endpoint = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'AccessToken',
                    'AuthorizationHeaderToken',
                    'BasicAuth',
                    'SudoHeader',
                    'SudoParam',
                    'TOTPHeader',
                    'Token'
                ],
                'endpoint_path': '/repos/{owner}/{repo}/mirror-sync',
                'operation_id': 'repo_mirror_sync',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'owner',
                    'repo',
                ],
                'required': [
                    'owner',
                    'repo',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'owner':
                        (str,),
                    'repo':
                        (str,),
                },
                'attribute_map': {
                    'owner': 'owner',
                    'repo': 'repo',
                },
                'location_map': {
                    'owner': 'path',
                    'repo': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [],
                'content_type': [],
            },
            api_client=api_client
        )
        self.repo_pull_request_is_merged_endpoint = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'AccessToken',
                    'AuthorizationHeaderToken',
                    'BasicAuth',
                    'SudoHeader',
                    'SudoParam',
                    'TOTPHeader',
                    'Token'
                ],
                'endpoint_path': '/repos/{owner}/{repo}/pulls/{index}/merge',
                'operation_id': 'repo_pull_request_is_merged',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'owner',
                    'repo',
                    'index',
                ],
                'required': [
                    'owner',
                    'repo',
                    'index',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'owner':
                        (str,),
                    'repo':
                        (str,),
                    'index':
                        (int,),
                },
                'attribute_map': {
                    'owner': 'owner',
                    'repo': 'repo',
                    'index': 'index',
                },
                'location_map': {
                    'owner': 'path',
                    'repo': 'path',
                    'index': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [],
                'content_type': [],
            },
            api_client=api_client
        )
        self.repo_push_mirror_sync_endpoint = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'AccessToken',
                    'AuthorizationHeaderToken',
                    'BasicAuth',
                    'SudoHeader',
                    'SudoParam',
                    'TOTPHeader',
                    'Token'
                ],
                'endpoint_path': '/repos/{owner}/{repo}/push_mirrors-sync',
                'operation_id': 'repo_push_mirror_sync',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'owner',
                    'repo',
                ],
                'required': [
                    'owner',
                    'repo',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'owner':
                        (str,),
                    'repo':
                        (str,),
                },
                'attribute_map': {
                    'owner': 'owner',
                    'repo': 'repo',
                },
                'location_map': {
                    'owner': 'path',
                    'repo': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [],
                'content_type': [],
            },
            api_client=api_client
        )
        self.repo_search_endpoint = _Endpoint(
            settings={
                'response_type': (SearchResults,),
                'auth': [
                    'AccessToken',
                    'AuthorizationHeaderToken',
                    'BasicAuth',
                    'SudoHeader',
                    'SudoParam',
                    'TOTPHeader',
                    'Token'
                ],
                'endpoint_path': '/repos/search',
                'operation_id': 'repo_search',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'q',
                    'topic',
                    'include_desc',
                    'uid',
                    'priority_owner_id',
                    'team_id',
                    'starred_by',
                    'private',
                    'is_private',
                    'template',
                    'archived',
                    'mode',
                    'exclusive',
                    'sort',
                    'order',
                    'page',
                    'limit',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'q':
                        (str,),
                    'topic':
                        (bool,),
                    'include_desc':
                        (bool,),
                    'uid':
                        (int,),
                    'priority_owner_id':
                        (int,),
                    'team_id':
                        (int,),
                    'starred_by':
                        (int,),
                    'private':
                        (bool,),
                    'is_private':
                        (bool,),
                    'template':
                        (bool,),
                    'archived':
                        (bool,),
                    'mode':
                        (str,),
                    'exclusive':
                        (bool,),
                    'sort':
                        (str,),
                    'order':
                        (str,),
                    'page':
                        (int,),
                    'limit':
                        (int,),
                },
                'attribute_map': {
                    'q': 'q',
                    'topic': 'topic',
                    'include_desc': 'includeDesc',
                    'uid': 'uid',
                    'priority_owner_id': 'priority_owner_id',
                    'team_id': 'team_id',
                    'starred_by': 'starredBy',
                    'private': 'private',
                    'is_private': 'is_private',
                    'template': 'template',
                    'archived': 'archived',
                    'mode': 'mode',
                    'exclusive': 'exclusive',
                    'sort': 'sort',
                    'order': 'order',
                    'page': 'page',
                    'limit': 'limit',
                },
                'location_map': {
                    'q': 'query',
                    'topic': 'query',
                    'include_desc': 'query',
                    'uid': 'query',
                    'priority_owner_id': 'query',
                    'team_id': 'query',
                    'starred_by': 'query',
                    'private': 'query',
                    'is_private': 'query',
                    'template': 'query',
                    'archived': 'query',
                    'mode': 'query',
                    'exclusive': 'query',
                    'sort': 'query',
                    'order': 'query',
                    'page': 'query',
                    'limit': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.repo_signing_key_endpoint = _Endpoint(
            settings={
                'response_type': (str,),
                'auth': [
                    'AccessToken',
                    'AuthorizationHeaderToken',
                    'BasicAuth',
                    'SudoHeader',
                    'SudoParam',
                    'TOTPHeader',
                    'Token'
                ],
                'endpoint_path': '/repos/{owner}/{repo}/signing-key.gpg',
                'operation_id': 'repo_signing_key',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'owner',
                    'repo',
                ],
                'required': [
                    'owner',
                    'repo',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'owner':
                        (str,),
                    'repo':
                        (str,),
                },
                'attribute_map': {
                    'owner': 'owner',
                    'repo': 'repo',
                },
                'location_map': {
                    'owner': 'path',
                    'repo': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'text/plain'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.repo_submit_pull_review_endpoint = _Endpoint(
            settings={
                'response_type': (PullReview,),
                'auth': [
                    'AccessToken',
                    'AuthorizationHeaderToken',
                    'BasicAuth',
                    'SudoHeader',
                    'SudoParam',
                    'TOTPHeader',
                    'Token'
                ],
                'endpoint_path': '/repos/{owner}/{repo}/pulls/{index}/reviews/{id}',
                'operation_id': 'repo_submit_pull_review',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'owner',
                    'repo',
                    'index',
                    'id',
                    'body',
                ],
                'required': [
                    'owner',
                    'repo',
                    'index',
                    'id',
                    'body',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'owner':
                        (str,),
                    'repo':
                        (str,),
                    'index':
                        (int,),
                    'id':
                        (int,),
                    'body':
                        (SubmitPullReviewOptions,),
                },
                'attribute_map': {
                    'owner': 'owner',
                    'repo': 'repo',
                    'index': 'index',
                    'id': 'id',
                },
                'location_map': {
                    'owner': 'path',
                    'repo': 'path',
                    'index': 'path',
                    'id': 'path',
                    'body': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json',
                    'text/plain'
                ]
            },
            api_client=api_client
        )
        self.repo_test_hook_endpoint = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'AccessToken',
                    'AuthorizationHeaderToken',
                    'BasicAuth',
                    'SudoHeader',
                    'SudoParam',
                    'TOTPHeader',
                    'Token'
                ],
                'endpoint_path': '/repos/{owner}/{repo}/hooks/{id}/tests',
                'operation_id': 'repo_test_hook',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'owner',
                    'repo',
                    'id',
                    'ref',
                ],
                'required': [
                    'owner',
                    'repo',
                    'id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'owner':
                        (str,),
                    'repo':
                        (str,),
                    'id':
                        (int,),
                    'ref':
                        (str,),
                },
                'attribute_map': {
                    'owner': 'owner',
                    'repo': 'repo',
                    'id': 'id',
                    'ref': 'ref',
                },
                'location_map': {
                    'owner': 'path',
                    'repo': 'path',
                    'id': 'path',
                    'ref': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [],
                'content_type': [],
            },
            api_client=api_client
        )
        self.repo_tracked_times_endpoint = _Endpoint(
            settings={
                'response_type': ([TrackedTime],),
                'auth': [
                    'AccessToken',
                    'AuthorizationHeaderToken',
                    'BasicAuth',
                    'SudoHeader',
                    'SudoParam',
                    'TOTPHeader',
                    'Token'
                ],
                'endpoint_path': '/repos/{owner}/{repo}/times',
                'operation_id': 'repo_tracked_times',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'owner',
                    'repo',
                    'user',
                    'since',
                    'before',
                    'page',
                    'limit',
                ],
                'required': [
                    'owner',
                    'repo',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'owner':
                        (str,),
                    'repo':
                        (str,),
                    'user':
                        (str,),
                    'since':
                        (datetime,),
                    'before':
                        (datetime,),
                    'page':
                        (int,),
                    'limit':
                        (int,),
                },
                'attribute_map': {
                    'owner': 'owner',
                    'repo': 'repo',
                    'user': 'user',
                    'since': 'since',
                    'before': 'before',
                    'page': 'page',
                    'limit': 'limit',
                },
                'location_map': {
                    'owner': 'path',
                    'repo': 'path',
                    'user': 'query',
                    'since': 'query',
                    'before': 'query',
                    'page': 'query',
                    'limit': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.repo_transfer_endpoint = _Endpoint(
            settings={
                'response_type': (Repository,),
                'auth': [
                    'AccessToken',
                    'AuthorizationHeaderToken',
                    'BasicAuth',
                    'SudoHeader',
                    'SudoParam',
                    'TOTPHeader',
                    'Token'
                ],
                'endpoint_path': '/repos/{owner}/{repo}/transfer',
                'operation_id': 'repo_transfer',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'owner',
                    'repo',
                    'body',
                ],
                'required': [
                    'owner',
                    'repo',
                    'body',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'owner':
                        (str,),
                    'repo':
                        (str,),
                    'body':
                        (TransferRepoOption,),
                },
                'attribute_map': {
                    'owner': 'owner',
                    'repo': 'repo',
                },
                'location_map': {
                    'owner': 'path',
                    'repo': 'path',
                    'body': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json',
                    'text/plain'
                ]
            },
            api_client=api_client
        )
        self.repo_un_dismiss_pull_review_endpoint = _Endpoint(
            settings={
                'response_type': (PullReview,),
                'auth': [
                    'AccessToken',
                    'AuthorizationHeaderToken',
                    'BasicAuth',
                    'SudoHeader',
                    'SudoParam',
                    'TOTPHeader',
                    'Token'
                ],
                'endpoint_path': '/repos/{owner}/{repo}/pulls/{index}/reviews/{id}/undismissals',
                'operation_id': 'repo_un_dismiss_pull_review',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'owner',
                    'repo',
                    'index',
                    'id',
                ],
                'required': [
                    'owner',
                    'repo',
                    'index',
                    'id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'owner':
                        (str,),
                    'repo':
                        (str,),
                    'index':
                        (int,),
                    'id':
                        (int,),
                },
                'attribute_map': {
                    'owner': 'owner',
                    'repo': 'repo',
                    'index': 'index',
                    'id': 'id',
                },
                'location_map': {
                    'owner': 'path',
                    'repo': 'path',
                    'index': 'path',
                    'id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.repo_update_file_endpoint = _Endpoint(
            settings={
                'response_type': (FileResponse,),
                'auth': [
                    'AccessToken',
                    'AuthorizationHeaderToken',
                    'BasicAuth',
                    'SudoHeader',
                    'SudoParam',
                    'TOTPHeader',
                    'Token'
                ],
                'endpoint_path': '/repos/{owner}/{repo}/contents/{filepath}',
                'operation_id': 'repo_update_file',
                'http_method': 'PUT',
                'servers': None,
            },
            params_map={
                'all': [
                    'owner',
                    'repo',
                    'filepath',
                    'body',
                ],
                'required': [
                    'owner',
                    'repo',
                    'filepath',
                    'body',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'owner':
                        (str,),
                    'repo':
                        (str,),
                    'filepath':
                        (str,),
                    'body':
                        (UpdateFileOptions,),
                },
                'attribute_map': {
                    'owner': 'owner',
                    'repo': 'repo',
                    'filepath': 'filepath',
                },
                'location_map': {
                    'owner': 'path',
                    'repo': 'path',
                    'filepath': 'path',
                    'body': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.repo_update_pull_request_endpoint = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'AccessToken',
                    'AuthorizationHeaderToken',
                    'BasicAuth',
                    'SudoHeader',
                    'SudoParam',
                    'TOTPHeader',
                    'Token'
                ],
                'endpoint_path': '/repos/{owner}/{repo}/pulls/{index}/update',
                'operation_id': 'repo_update_pull_request',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'owner',
                    'repo',
                    'index',
                    'style',
                ],
                'required': [
                    'owner',
                    'repo',
                    'index',
                ],
                'nullable': [
                ],
                'enum': [
                    'style',
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                    ('style',): {

                        "MERGE": "merge",
                        "REBASE": "rebase"
                    },
                },
                'openapi_types': {
                    'owner':
                        (str,),
                    'repo':
                        (str,),
                    'index':
                        (int,),
                    'style':
                        (str,),
                },
                'attribute_map': {
                    'owner': 'owner',
                    'repo': 'repo',
                    'index': 'index',
                    'style': 'style',
                },
                'location_map': {
                    'owner': 'path',
                    'repo': 'path',
                    'index': 'path',
                    'style': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [],
                'content_type': [],
            },
            api_client=api_client
        )
        self.repo_update_topics_endpoint = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'AccessToken',
                    'AuthorizationHeaderToken',
                    'BasicAuth',
                    'SudoHeader',
                    'SudoParam',
                    'TOTPHeader',
                    'Token'
                ],
                'endpoint_path': '/repos/{owner}/{repo}/topics',
                'operation_id': 'repo_update_topics',
                'http_method': 'PUT',
                'servers': None,
            },
            params_map={
                'all': [
                    'owner',
                    'repo',
                    'body',
                ],
                'required': [
                    'owner',
                    'repo',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'owner':
                        (str,),
                    'repo':
                        (str,),
                    'body':
                        (RepoTopicOptions,),
                },
                'attribute_map': {
                    'owner': 'owner',
                    'repo': 'repo',
                },
                'location_map': {
                    'owner': 'path',
                    'repo': 'path',
                    'body': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [],
                'content_type': [
                    'application/json',
                    'text/plain'
                ]
            },
            api_client=api_client
        )
        self.topic_search_endpoint = _Endpoint(
            settings={
                'response_type': ([TopicResponse],),
                'auth': [
                    'AccessToken',
                    'AuthorizationHeaderToken',
                    'BasicAuth',
                    'SudoHeader',
                    'SudoParam',
                    'TOTPHeader',
                    'Token'
                ],
                'endpoint_path': '/topics/search',
                'operation_id': 'topic_search',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'q',
                    'page',
                    'limit',
                ],
                'required': [
                    'q',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'q':
                        (str,),
                    'page':
                        (int,),
                    'limit':
                        (int,),
                },
                'attribute_map': {
                    'q': 'q',
                    'page': 'page',
                    'limit': 'limit',
                },
                'location_map': {
                    'q': 'query',
                    'page': 'query',
                    'limit': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.user_current_check_subscription_endpoint = _Endpoint(
            settings={
                'response_type': (WatchInfo,),
                'auth': [
                    'AccessToken',
                    'AuthorizationHeaderToken',
                    'BasicAuth',
                    'SudoHeader',
                    'SudoParam',
                    'TOTPHeader',
                    'Token'
                ],
                'endpoint_path': '/repos/{owner}/{repo}/subscription',
                'operation_id': 'user_current_check_subscription',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'owner',
                    'repo',
                ],
                'required': [
                    'owner',
                    'repo',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'owner':
                        (str,),
                    'repo':
                        (str,),
                },
                'attribute_map': {
                    'owner': 'owner',
                    'repo': 'repo',
                },
                'location_map': {
                    'owner': 'path',
                    'repo': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json',
                    'text/html'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.user_current_delete_subscription_endpoint = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'AccessToken',
                    'AuthorizationHeaderToken',
                    'BasicAuth',
                    'SudoHeader',
                    'SudoParam',
                    'TOTPHeader',
                    'Token'
                ],
                'endpoint_path': '/repos/{owner}/{repo}/subscription',
                'operation_id': 'user_current_delete_subscription',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'owner',
                    'repo',
                ],
                'required': [
                    'owner',
                    'repo',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'owner':
                        (str,),
                    'repo':
                        (str,),
                },
                'attribute_map': {
                    'owner': 'owner',
                    'repo': 'repo',
                },
                'location_map': {
                    'owner': 'path',
                    'repo': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [],
                'content_type': [],
            },
            api_client=api_client
        )
        self.user_current_put_subscription_endpoint = _Endpoint(
            settings={
                'response_type': (WatchInfo,),
                'auth': [
                    'AccessToken',
                    'AuthorizationHeaderToken',
                    'BasicAuth',
                    'SudoHeader',
                    'SudoParam',
                    'TOTPHeader',
                    'Token'
                ],
                'endpoint_path': '/repos/{owner}/{repo}/subscription',
                'operation_id': 'user_current_put_subscription',
                'http_method': 'PUT',
                'servers': None,
            },
            params_map={
                'all': [
                    'owner',
                    'repo',
                ],
                'required': [
                    'owner',
                    'repo',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'owner':
                        (str,),
                    'repo':
                        (str,),
                },
                'attribute_map': {
                    'owner': 'owner',
                    'repo': 'repo',
                },
                'location_map': {
                    'owner': 'path',
                    'repo': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json',
                    'text/html'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.user_tracked_times_endpoint = _Endpoint(
            settings={
                'response_type': ([TrackedTime],),
                'auth': [
                    'AccessToken',
                    'AuthorizationHeaderToken',
                    'BasicAuth',
                    'SudoHeader',
                    'SudoParam',
                    'TOTPHeader',
                    'Token'
                ],
                'endpoint_path': '/repos/{owner}/{repo}/times/{user}',
                'operation_id': 'user_tracked_times',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'owner',
                    'repo',
                    'user',
                ],
                'required': [
                    'owner',
                    'repo',
                    'user',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'owner':
                        (str,),
                    'repo':
                        (str,),
                    'user':
                        (str,),
                },
                'attribute_map': {
                    'owner': 'owner',
                    'repo': 'repo',
                    'user': 'user',
                },
                'location_map': {
                    'owner': 'path',
                    'repo': 'path',
                    'user': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )

    def accept_repo_transfer(
        self,
        owner,
        repo,
        **kwargs
    ):
        """Accept a repo transfer  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.accept_repo_transfer(owner, repo, async_req=True)
        >>> result = thread.get()

        Args:
            owner (str): owner of the repo to transfer
            repo (str): name of the repo to transfer

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            Repository
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['owner'] = \
            owner
        kwargs['repo'] = \
            repo
        return self.accept_repo_transfer_endpoint.call_with_http_info(**kwargs)

    def create_current_user_repo(
        self,
        **kwargs
    ):
        """Create a repository  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_current_user_repo(async_req=True)
        >>> result = thread.get()


        Keyword Args:
            body (CreateRepoOption): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            Repository
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        return self.create_current_user_repo_endpoint.call_with_http_info(**kwargs)

    def create_fork(
        self,
        owner,
        repo,
        **kwargs
    ):
        """Fork a repository  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_fork(owner, repo, async_req=True)
        >>> result = thread.get()

        Args:
            owner (str): owner of the repo to fork
            repo (str): name of the repo to fork

        Keyword Args:
            body (CreateForkOption): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            Repository
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['owner'] = \
            owner
        kwargs['repo'] = \
            repo
        return self.create_fork_endpoint.call_with_http_info(**kwargs)

    def generate_repo(
        self,
        template_owner,
        template_repo,
        **kwargs
    ):
        """Create a repository using a template  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.generate_repo(template_owner, template_repo, async_req=True)
        >>> result = thread.get()

        Args:
            template_owner (str): name of the template repository owner
            template_repo (str): name of the template repository

        Keyword Args:
            body (GenerateRepoOption): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            Repository
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['template_owner'] = \
            template_owner
        kwargs['template_repo'] = \
            template_repo
        return self.generate_repo_endpoint.call_with_http_info(**kwargs)

    def get_annotated_tag(
        self,
        owner,
        repo,
        sha,
        **kwargs
    ):
        """Gets the tag object of an annotated tag (not lightweight tags)  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_annotated_tag(owner, repo, sha, async_req=True)
        >>> result = thread.get()

        Args:
            owner (str): owner of the repo
            repo (str): name of the repo
            sha (str): sha of the tag. The Git tags API only supports annotated tag objects, not lightweight tags.

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            AnnotatedTag
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['owner'] = \
            owner
        kwargs['repo'] = \
            repo
        kwargs['sha'] = \
            sha
        return self.get_annotated_tag_endpoint.call_with_http_info(**kwargs)

    def get_blob(
        self,
        owner,
        repo,
        sha,
        **kwargs
    ):
        """Gets the blob of a repository.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_blob(owner, repo, sha, async_req=True)
        >>> result = thread.get()

        Args:
            owner (str): owner of the repo
            repo (str): name of the repo
            sha (str): sha of the commit

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            GitBlobResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['owner'] = \
            owner
        kwargs['repo'] = \
            repo
        kwargs['sha'] = \
            sha
        return self.get_blob_endpoint.call_with_http_info(**kwargs)

    def get_tree(
        self,
        owner,
        repo,
        sha,
        **kwargs
    ):
        """Gets the tree of a repository.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_tree(owner, repo, sha, async_req=True)
        >>> result = thread.get()

        Args:
            owner (str): owner of the repo
            repo (str): name of the repo
            sha (str): sha of the commit

        Keyword Args:
            recursive (bool): show all directories and files. [optional]
            page (int): page number; the 'truncated' field in the response will be true if there are still more items after this page, false if the last page. [optional]
            per_page (int): number of items per page. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            GitTreeResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['owner'] = \
            owner
        kwargs['repo'] = \
            repo
        kwargs['sha'] = \
            sha
        return self.get_tree_endpoint.call_with_http_info(**kwargs)

    def list_forks(
        self,
        owner,
        repo,
        **kwargs
    ):
        """List a repository's forks  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.list_forks(owner, repo, async_req=True)
        >>> result = thread.get()

        Args:
            owner (str): owner of the repo
            repo (str): name of the repo

        Keyword Args:
            page (int): page number of results to return (1-based). [optional]
            limit (int): page size of results. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            [Repository]
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['owner'] = \
            owner
        kwargs['repo'] = \
            repo
        return self.list_forks_endpoint.call_with_http_info(**kwargs)

    def reject_repo_transfer(
        self,
        owner,
        repo,
        **kwargs
    ):
        """Reject a repo transfer  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.reject_repo_transfer(owner, repo, async_req=True)
        >>> result = thread.get()

        Args:
            owner (str): owner of the repo to transfer
            repo (str): name of the repo to transfer

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            Repository
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['owner'] = \
            owner
        kwargs['repo'] = \
            repo
        return self.reject_repo_transfer_endpoint.call_with_http_info(**kwargs)

    def repo_add_collaborator(
        self,
        owner,
        repo,
        collaborator,
        **kwargs
    ):
        """Add a collaborator to a repository  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.repo_add_collaborator(owner, repo, collaborator, async_req=True)
        >>> result = thread.get()

        Args:
            owner (str): owner of the repo
            repo (str): name of the repo
            collaborator (str): username of the collaborator to add

        Keyword Args:
            body (AddCollaboratorOption): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            None
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['owner'] = \
            owner
        kwargs['repo'] = \
            repo
        kwargs['collaborator'] = \
            collaborator
        return self.repo_add_collaborator_endpoint.call_with_http_info(**kwargs)

    def repo_add_push_mirror(
        self,
        owner,
        repo,
        **kwargs
    ):
        """add a push mirror to the repository  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.repo_add_push_mirror(owner, repo, async_req=True)
        >>> result = thread.get()

        Args:
            owner (str): owner of the repo
            repo (str): name of the repo

        Keyword Args:
            body (CreatePushMirrorOption): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            PushMirror
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['owner'] = \
            owner
        kwargs['repo'] = \
            repo
        return self.repo_add_push_mirror_endpoint.call_with_http_info(**kwargs)

    def repo_add_team(
        self,
        owner,
        repo,
        team,
        **kwargs
    ):
        """Add a team to a repository  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.repo_add_team(owner, repo, team, async_req=True)
        >>> result = thread.get()

        Args:
            owner (str): owner of the repo
            repo (str): name of the repo
            team (str): team name

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            None
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['owner'] = \
            owner
        kwargs['repo'] = \
            repo
        kwargs['team'] = \
            team
        return self.repo_add_team_endpoint.call_with_http_info(**kwargs)

    def repo_add_topic(
        self,
        owner,
        repo,
        topic,
        **kwargs
    ):
        """Add a topic to a repository  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.repo_add_topic(owner, repo, topic, async_req=True)
        >>> result = thread.get()

        Args:
            owner (str): owner of the repo
            repo (str): name of the repo
            topic (str): name of the topic to add

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            None
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['owner'] = \
            owner
        kwargs['repo'] = \
            repo
        kwargs['topic'] = \
            topic
        return self.repo_add_topic_endpoint.call_with_http_info(**kwargs)

    def repo_apply_diff_patch(
        self,
        owner,
        repo,
        body,
        **kwargs
    ):
        """Apply diff patch to repository  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.repo_apply_diff_patch(owner, repo, body, async_req=True)
        >>> result = thread.get()

        Args:
            owner (str): owner of the repo
            repo (str): name of the repo
            body (UpdateFileOptions):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            FileResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['owner'] = \
            owner
        kwargs['repo'] = \
            repo
        kwargs['body'] = \
            body
        return self.repo_apply_diff_patch_endpoint.call_with_http_info(**kwargs)

    def repo_cancel_scheduled_auto_merge(
        self,
        owner,
        repo,
        index,
        **kwargs
    ):
        """Cancel the scheduled auto merge for the given pull request  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.repo_cancel_scheduled_auto_merge(owner, repo, index, async_req=True)
        >>> result = thread.get()

        Args:
            owner (str): owner of the repo
            repo (str): name of the repo
            index (int): index of the pull request to merge

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            None
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['owner'] = \
            owner
        kwargs['repo'] = \
            repo
        kwargs['index'] = \
            index
        return self.repo_cancel_scheduled_auto_merge_endpoint.call_with_http_info(**kwargs)

    def repo_check_collaborator(
        self,
        owner,
        repo,
        collaborator,
        **kwargs
    ):
        """Check if a user is a collaborator of a repository  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.repo_check_collaborator(owner, repo, collaborator, async_req=True)
        >>> result = thread.get()

        Args:
            owner (str): owner of the repo
            repo (str): name of the repo
            collaborator (str): username of the collaborator

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            None
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['owner'] = \
            owner
        kwargs['repo'] = \
            repo
        kwargs['collaborator'] = \
            collaborator
        return self.repo_check_collaborator_endpoint.call_with_http_info(**kwargs)

    def repo_check_team(
        self,
        owner,
        repo,
        team,
        **kwargs
    ):
        """Check if a team is assigned to a repository  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.repo_check_team(owner, repo, team, async_req=True)
        >>> result = thread.get()

        Args:
            owner (str): owner of the repo
            repo (str): name of the repo
            team (str): team name

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            Team
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['owner'] = \
            owner
        kwargs['repo'] = \
            repo
        kwargs['team'] = \
            team
        return self.repo_check_team_endpoint.call_with_http_info(**kwargs)

    def repo_create_branch(
        self,
        owner,
        repo,
        **kwargs
    ):
        """Create a branch  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.repo_create_branch(owner, repo, async_req=True)
        >>> result = thread.get()

        Args:
            owner (str): owner of the repo
            repo (str): name of the repo

        Keyword Args:
            body (CreateBranchRepoOption): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            Branch
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['owner'] = \
            owner
        kwargs['repo'] = \
            repo
        return self.repo_create_branch_endpoint.call_with_http_info(**kwargs)

    def repo_create_branch_protection(
        self,
        owner,
        repo,
        **kwargs
    ):
        """Create a branch protections for a repository  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.repo_create_branch_protection(owner, repo, async_req=True)
        >>> result = thread.get()

        Args:
            owner (str): owner of the repo
            repo (str): name of the repo

        Keyword Args:
            body (CreateBranchProtectionOption): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            BranchProtection
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['owner'] = \
            owner
        kwargs['repo'] = \
            repo
        return self.repo_create_branch_protection_endpoint.call_with_http_info(**kwargs)

    def repo_create_file(
        self,
        owner,
        repo,
        filepath,
        body,
        **kwargs
    ):
        """Create a file in a repository  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.repo_create_file(owner, repo, filepath, body, async_req=True)
        >>> result = thread.get()

        Args:
            owner (str): owner of the repo
            repo (str): name of the repo
            filepath (str): path of the file to create
            body (CreateFileOptions):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            FileResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['owner'] = \
            owner
        kwargs['repo'] = \
            repo
        kwargs['filepath'] = \
            filepath
        kwargs['body'] = \
            body
        return self.repo_create_file_endpoint.call_with_http_info(**kwargs)

    def repo_create_hook(
        self,
        owner,
        repo,
        **kwargs
    ):
        """Create a hook  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.repo_create_hook(owner, repo, async_req=True)
        >>> result = thread.get()

        Args:
            owner (str): owner of the repo
            repo (str): name of the repo

        Keyword Args:
            body (CreateHookOption): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            Hook
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['owner'] = \
            owner
        kwargs['repo'] = \
            repo
        return self.repo_create_hook_endpoint.call_with_http_info(**kwargs)

    def repo_create_key(
        self,
        owner,
        repo,
        **kwargs
    ):
        """Add a key to a repository  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.repo_create_key(owner, repo, async_req=True)
        >>> result = thread.get()

        Args:
            owner (str): owner of the repo
            repo (str): name of the repo

        Keyword Args:
            body (CreateKeyOption): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            DeployKey
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['owner'] = \
            owner
        kwargs['repo'] = \
            repo
        return self.repo_create_key_endpoint.call_with_http_info(**kwargs)

    def repo_create_pull_request(
        self,
        owner,
        repo,
        **kwargs
    ):
        """Create a pull request  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.repo_create_pull_request(owner, repo, async_req=True)
        >>> result = thread.get()

        Args:
            owner (str): owner of the repo
            repo (str): name of the repo

        Keyword Args:
            body (CreatePullRequestOption): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            PullRequest
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['owner'] = \
            owner
        kwargs['repo'] = \
            repo
        return self.repo_create_pull_request_endpoint.call_with_http_info(**kwargs)

    def repo_create_pull_review(
        self,
        owner,
        repo,
        index,
        body,
        **kwargs
    ):
        """Create a review to an pull request  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.repo_create_pull_review(owner, repo, index, body, async_req=True)
        >>> result = thread.get()

        Args:
            owner (str): owner of the repo
            repo (str): name of the repo
            index (int): index of the pull request
            body (CreatePullReviewOptions):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            PullReview
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['owner'] = \
            owner
        kwargs['repo'] = \
            repo
        kwargs['index'] = \
            index
        kwargs['body'] = \
            body
        return self.repo_create_pull_review_endpoint.call_with_http_info(**kwargs)

    def repo_create_pull_review_requests(
        self,
        owner,
        repo,
        index,
        body,
        **kwargs
    ):
        """create review requests for a pull request  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.repo_create_pull_review_requests(owner, repo, index, body, async_req=True)
        >>> result = thread.get()

        Args:
            owner (str): owner of the repo
            repo (str): name of the repo
            index (int): index of the pull request
            body (PullReviewRequestOptions):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            [PullReview]
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['owner'] = \
            owner
        kwargs['repo'] = \
            repo
        kwargs['index'] = \
            index
        kwargs['body'] = \
            body
        return self.repo_create_pull_review_requests_endpoint.call_with_http_info(**kwargs)

    def repo_create_release(
        self,
        owner,
        repo,
        **kwargs
    ):
        """Create a release  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.repo_create_release(owner, repo, async_req=True)
        >>> result = thread.get()

        Args:
            owner (str): owner of the repo
            repo (str): name of the repo

        Keyword Args:
            body (CreateReleaseOption): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            Release
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['owner'] = \
            owner
        kwargs['repo'] = \
            repo
        return self.repo_create_release_endpoint.call_with_http_info(**kwargs)

    def repo_create_release_attachment(
        self,
        owner,
        repo,
        id,
        attachment,
        **kwargs
    ):
        """Create a release attachment  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.repo_create_release_attachment(owner, repo, id, attachment, async_req=True)
        >>> result = thread.get()

        Args:
            owner (str): owner of the repo
            repo (str): name of the repo
            id (int): id of the release
            attachment (file_type): attachment to upload

        Keyword Args:
            name (str): name of the attachment. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            Attachment
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['owner'] = \
            owner
        kwargs['repo'] = \
            repo
        kwargs['id'] = \
            id
        kwargs['attachment'] = \
            attachment
        return self.repo_create_release_attachment_endpoint.call_with_http_info(**kwargs)

    def repo_create_status(
        self,
        owner,
        repo,
        sha,
        **kwargs
    ):
        """Create a commit status  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.repo_create_status(owner, repo, sha, async_req=True)
        >>> result = thread.get()

        Args:
            owner (str): owner of the repo
            repo (str): name of the repo
            sha (str): sha of the commit

        Keyword Args:
            body (CreateStatusOption): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            CommitStatus
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['owner'] = \
            owner
        kwargs['repo'] = \
            repo
        kwargs['sha'] = \
            sha
        return self.repo_create_status_endpoint.call_with_http_info(**kwargs)

    def repo_create_tag(
        self,
        owner,
        repo,
        **kwargs
    ):
        """Create a new git tag in a repository  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.repo_create_tag(owner, repo, async_req=True)
        >>> result = thread.get()

        Args:
            owner (str): owner of the repo
            repo (str): name of the repo

        Keyword Args:
            body (CreateTagOption): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            Tag
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['owner'] = \
            owner
        kwargs['repo'] = \
            repo
        return self.repo_create_tag_endpoint.call_with_http_info(**kwargs)

    def repo_create_wiki_page(
        self,
        owner,
        repo,
        **kwargs
    ):
        """Create a wiki page  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.repo_create_wiki_page(owner, repo, async_req=True)
        >>> result = thread.get()

        Args:
            owner (str): owner of the repo
            repo (str): name of the repo

        Keyword Args:
            body (CreateWikiPageOptions): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            WikiPage
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['owner'] = \
            owner
        kwargs['repo'] = \
            repo
        return self.repo_create_wiki_page_endpoint.call_with_http_info(**kwargs)

    def repo_delete(
        self,
        owner,
        repo,
        **kwargs
    ):
        """Delete a repository  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.repo_delete(owner, repo, async_req=True)
        >>> result = thread.get()

        Args:
            owner (str): owner of the repo to delete
            repo (str): name of the repo to delete

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            None
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['owner'] = \
            owner
        kwargs['repo'] = \
            repo
        return self.repo_delete_endpoint.call_with_http_info(**kwargs)

    def repo_delete_branch(
        self,
        owner,
        repo,
        branch,
        **kwargs
    ):
        """Delete a specific branch from a repository  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.repo_delete_branch(owner, repo, branch, async_req=True)
        >>> result = thread.get()

        Args:
            owner (str): owner of the repo
            repo (str): name of the repo
            branch (str): branch to delete

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            None
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['owner'] = \
            owner
        kwargs['repo'] = \
            repo
        kwargs['branch'] = \
            branch
        return self.repo_delete_branch_endpoint.call_with_http_info(**kwargs)

    def repo_delete_branch_protection(
        self,
        owner,
        repo,
        name,
        **kwargs
    ):
        """Delete a specific branch protection for the repository  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.repo_delete_branch_protection(owner, repo, name, async_req=True)
        >>> result = thread.get()

        Args:
            owner (str): owner of the repo
            repo (str): name of the repo
            name (str): name of protected branch

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            None
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['owner'] = \
            owner
        kwargs['repo'] = \
            repo
        kwargs['name'] = \
            name
        return self.repo_delete_branch_protection_endpoint.call_with_http_info(**kwargs)

    def repo_delete_collaborator(
        self,
        owner,
        repo,
        collaborator,
        **kwargs
    ):
        """Delete a collaborator from a repository  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.repo_delete_collaborator(owner, repo, collaborator, async_req=True)
        >>> result = thread.get()

        Args:
            owner (str): owner of the repo
            repo (str): name of the repo
            collaborator (str): username of the collaborator to delete

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            None
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['owner'] = \
            owner
        kwargs['repo'] = \
            repo
        kwargs['collaborator'] = \
            collaborator
        return self.repo_delete_collaborator_endpoint.call_with_http_info(**kwargs)

    def repo_delete_file(
        self,
        owner,
        repo,
        filepath,
        body,
        **kwargs
    ):
        """Delete a file in a repository  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.repo_delete_file(owner, repo, filepath, body, async_req=True)
        >>> result = thread.get()

        Args:
            owner (str): owner of the repo
            repo (str): name of the repo
            filepath (str): path of the file to delete
            body (DeleteFileOptions):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            FileDeleteResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['owner'] = \
            owner
        kwargs['repo'] = \
            repo
        kwargs['filepath'] = \
            filepath
        kwargs['body'] = \
            body
        return self.repo_delete_file_endpoint.call_with_http_info(**kwargs)

    def repo_delete_git_hook(
        self,
        owner,
        repo,
        id,
        **kwargs
    ):
        """Delete a Git hook in a repository  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.repo_delete_git_hook(owner, repo, id, async_req=True)
        >>> result = thread.get()

        Args:
            owner (str): owner of the repo
            repo (str): name of the repo
            id (str): id of the hook to get

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            None
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['owner'] = \
            owner
        kwargs['repo'] = \
            repo
        kwargs['id'] = \
            id
        return self.repo_delete_git_hook_endpoint.call_with_http_info(**kwargs)

    def repo_delete_hook(
        self,
        owner,
        repo,
        id,
        **kwargs
    ):
        """Delete a hook in a repository  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.repo_delete_hook(owner, repo, id, async_req=True)
        >>> result = thread.get()

        Args:
            owner (str): owner of the repo
            repo (str): name of the repo
            id (int): id of the hook to delete

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            None
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['owner'] = \
            owner
        kwargs['repo'] = \
            repo
        kwargs['id'] = \
            id
        return self.repo_delete_hook_endpoint.call_with_http_info(**kwargs)

    def repo_delete_key(
        self,
        owner,
        repo,
        id,
        **kwargs
    ):
        """Delete a key from a repository  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.repo_delete_key(owner, repo, id, async_req=True)
        >>> result = thread.get()

        Args:
            owner (str): owner of the repo
            repo (str): name of the repo
            id (int): id of the key to delete

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            None
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['owner'] = \
            owner
        kwargs['repo'] = \
            repo
        kwargs['id'] = \
            id
        return self.repo_delete_key_endpoint.call_with_http_info(**kwargs)

    def repo_delete_pull_review(
        self,
        owner,
        repo,
        index,
        id,
        **kwargs
    ):
        """Delete a specific review from a pull request  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.repo_delete_pull_review(owner, repo, index, id, async_req=True)
        >>> result = thread.get()

        Args:
            owner (str): owner of the repo
            repo (str): name of the repo
            index (int): index of the pull request
            id (int): id of the review

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            None
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['owner'] = \
            owner
        kwargs['repo'] = \
            repo
        kwargs['index'] = \
            index
        kwargs['id'] = \
            id
        return self.repo_delete_pull_review_endpoint.call_with_http_info(**kwargs)

    def repo_delete_pull_review_requests(
        self,
        owner,
        repo,
        index,
        body,
        **kwargs
    ):
        """cancel review requests for a pull request  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.repo_delete_pull_review_requests(owner, repo, index, body, async_req=True)
        >>> result = thread.get()

        Args:
            owner (str): owner of the repo
            repo (str): name of the repo
            index (int): index of the pull request
            body (PullReviewRequestOptions):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            None
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['owner'] = \
            owner
        kwargs['repo'] = \
            repo
        kwargs['index'] = \
            index
        kwargs['body'] = \
            body
        return self.repo_delete_pull_review_requests_endpoint.call_with_http_info(**kwargs)

    def repo_delete_push_mirror(
        self,
        owner,
        repo,
        name,
        **kwargs
    ):
        """deletes a push mirror from a repository by remoteName  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.repo_delete_push_mirror(owner, repo, name, async_req=True)
        >>> result = thread.get()

        Args:
            owner (str): owner of the repo
            repo (str): name of the repo
            name (str): remote name of the pushMirror

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            None
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['owner'] = \
            owner
        kwargs['repo'] = \
            repo
        kwargs['name'] = \
            name
        return self.repo_delete_push_mirror_endpoint.call_with_http_info(**kwargs)

    def repo_delete_release(
        self,
        owner,
        repo,
        id,
        **kwargs
    ):
        """Delete a release  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.repo_delete_release(owner, repo, id, async_req=True)
        >>> result = thread.get()

        Args:
            owner (str): owner of the repo
            repo (str): name of the repo
            id (int): id of the release to delete

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            None
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['owner'] = \
            owner
        kwargs['repo'] = \
            repo
        kwargs['id'] = \
            id
        return self.repo_delete_release_endpoint.call_with_http_info(**kwargs)

    def repo_delete_release_attachment(
        self,
        owner,
        repo,
        id,
        attachment_id,
        **kwargs
    ):
        """Delete a release attachment  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.repo_delete_release_attachment(owner, repo, id, attachment_id, async_req=True)
        >>> result = thread.get()

        Args:
            owner (str): owner of the repo
            repo (str): name of the repo
            id (int): id of the release
            attachment_id (int): id of the attachment to delete

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            None
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['owner'] = \
            owner
        kwargs['repo'] = \
            repo
        kwargs['id'] = \
            id
        kwargs['attachment_id'] = \
            attachment_id
        return self.repo_delete_release_attachment_endpoint.call_with_http_info(**kwargs)

    def repo_delete_release_by_tag(
        self,
        owner,
        repo,
        tag,
        **kwargs
    ):
        """Delete a release by tag name  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.repo_delete_release_by_tag(owner, repo, tag, async_req=True)
        >>> result = thread.get()

        Args:
            owner (str): owner of the repo
            repo (str): name of the repo
            tag (str): tag name of the release to delete

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            None
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['owner'] = \
            owner
        kwargs['repo'] = \
            repo
        kwargs['tag'] = \
            tag
        return self.repo_delete_release_by_tag_endpoint.call_with_http_info(**kwargs)

    def repo_delete_tag(
        self,
        owner,
        repo,
        tag,
        **kwargs
    ):
        """Delete a repository's tag by name  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.repo_delete_tag(owner, repo, tag, async_req=True)
        >>> result = thread.get()

        Args:
            owner (str): owner of the repo
            repo (str): name of the repo
            tag (str): name of tag to delete

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            None
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['owner'] = \
            owner
        kwargs['repo'] = \
            repo
        kwargs['tag'] = \
            tag
        return self.repo_delete_tag_endpoint.call_with_http_info(**kwargs)

    def repo_delete_team(
        self,
        owner,
        repo,
        team,
        **kwargs
    ):
        """Delete a team from a repository  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.repo_delete_team(owner, repo, team, async_req=True)
        >>> result = thread.get()

        Args:
            owner (str): owner of the repo
            repo (str): name of the repo
            team (str): team name

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            None
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['owner'] = \
            owner
        kwargs['repo'] = \
            repo
        kwargs['team'] = \
            team
        return self.repo_delete_team_endpoint.call_with_http_info(**kwargs)

    def repo_delete_topic(
        self,
        owner,
        repo,
        topic,
        **kwargs
    ):
        """Delete a topic from a repository  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.repo_delete_topic(owner, repo, topic, async_req=True)
        >>> result = thread.get()

        Args:
            owner (str): owner of the repo
            repo (str): name of the repo
            topic (str): name of the topic to delete

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            None
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['owner'] = \
            owner
        kwargs['repo'] = \
            repo
        kwargs['topic'] = \
            topic
        return self.repo_delete_topic_endpoint.call_with_http_info(**kwargs)

    def repo_delete_wiki_page(
        self,
        owner,
        repo,
        page_name,
        **kwargs
    ):
        """Delete a wiki page  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.repo_delete_wiki_page(owner, repo, page_name, async_req=True)
        >>> result = thread.get()

        Args:
            owner (str): owner of the repo
            repo (str): name of the repo
            page_name (str): name of the page

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            None
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['owner'] = \
            owner
        kwargs['repo'] = \
            repo
        kwargs['page_name'] = \
            page_name
        return self.repo_delete_wiki_page_endpoint.call_with_http_info(**kwargs)

    def repo_dismiss_pull_review(
        self,
        owner,
        repo,
        index,
        id,
        body,
        **kwargs
    ):
        """Dismiss a review for a pull request  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.repo_dismiss_pull_review(owner, repo, index, id, body, async_req=True)
        >>> result = thread.get()

        Args:
            owner (str): owner of the repo
            repo (str): name of the repo
            index (int): index of the pull request
            id (int): id of the review
            body (DismissPullReviewOptions):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            PullReview
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['owner'] = \
            owner
        kwargs['repo'] = \
            repo
        kwargs['index'] = \
            index
        kwargs['id'] = \
            id
        kwargs['body'] = \
            body
        return self.repo_dismiss_pull_review_endpoint.call_with_http_info(**kwargs)

    def repo_download_commit_diff_or_patch(
        self,
        owner,
        repo,
        sha,
        diff_type,
        **kwargs
    ):
        """Get a commit's diff or patch  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.repo_download_commit_diff_or_patch(owner, repo, sha, diff_type, async_req=True)
        >>> result = thread.get()

        Args:
            owner (str): owner of the repo
            repo (str): name of the repo
            sha (str): SHA of the commit to get
            diff_type (str): whether the output is diff or patch

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            str
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['owner'] = \
            owner
        kwargs['repo'] = \
            repo
        kwargs['sha'] = \
            sha
        kwargs['diff_type'] = \
            diff_type
        return self.repo_download_commit_diff_or_patch_endpoint.call_with_http_info(**kwargs)

    def repo_download_pull_diff_or_patch(
        self,
        owner,
        repo,
        index,
        diff_type,
        **kwargs
    ):
        """Get a pull request diff or patch  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.repo_download_pull_diff_or_patch(owner, repo, index, diff_type, async_req=True)
        >>> result = thread.get()

        Args:
            owner (str): owner of the repo
            repo (str): name of the repo
            index (int): index of the pull request to get
            diff_type (str): whether the output is diff or patch

        Keyword Args:
            binary (bool): whether to include binary file changes. if true, the diff is applicable with `git apply`. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            str
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['owner'] = \
            owner
        kwargs['repo'] = \
            repo
        kwargs['index'] = \
            index
        kwargs['diff_type'] = \
            diff_type
        return self.repo_download_pull_diff_or_patch_endpoint.call_with_http_info(**kwargs)

    def repo_edit(
        self,
        owner,
        repo,
        **kwargs
    ):
        """Edit a repository's properties. Only fields that are set will be changed.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.repo_edit(owner, repo, async_req=True)
        >>> result = thread.get()

        Args:
            owner (str): owner of the repo to edit
            repo (str): name of the repo to edit

        Keyword Args:
            body (EditRepoOption): Properties of a repo that you can edit. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            Repository
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['owner'] = \
            owner
        kwargs['repo'] = \
            repo
        return self.repo_edit_endpoint.call_with_http_info(**kwargs)

    def repo_edit_branch_protection(
        self,
        owner,
        repo,
        name,
        **kwargs
    ):
        """Edit a branch protections for a repository. Only fields that are set will be changed  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.repo_edit_branch_protection(owner, repo, name, async_req=True)
        >>> result = thread.get()

        Args:
            owner (str): owner of the repo
            repo (str): name of the repo
            name (str): name of protected branch

        Keyword Args:
            body (EditBranchProtectionOption): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            BranchProtection
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['owner'] = \
            owner
        kwargs['repo'] = \
            repo
        kwargs['name'] = \
            name
        return self.repo_edit_branch_protection_endpoint.call_with_http_info(**kwargs)

    def repo_edit_git_hook(
        self,
        owner,
        repo,
        id,
        **kwargs
    ):
        """Edit a Git hook in a repository  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.repo_edit_git_hook(owner, repo, id, async_req=True)
        >>> result = thread.get()

        Args:
            owner (str): owner of the repo
            repo (str): name of the repo
            id (str): id of the hook to get

        Keyword Args:
            body (EditGitHookOption): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            GitHook
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['owner'] = \
            owner
        kwargs['repo'] = \
            repo
        kwargs['id'] = \
            id
        return self.repo_edit_git_hook_endpoint.call_with_http_info(**kwargs)

    def repo_edit_hook(
        self,
        owner,
        repo,
        id,
        **kwargs
    ):
        """Edit a hook in a repository  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.repo_edit_hook(owner, repo, id, async_req=True)
        >>> result = thread.get()

        Args:
            owner (str): owner of the repo
            repo (str): name of the repo
            id (int): index of the hook

        Keyword Args:
            body (EditHookOption): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            Hook
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['owner'] = \
            owner
        kwargs['repo'] = \
            repo
        kwargs['id'] = \
            id
        return self.repo_edit_hook_endpoint.call_with_http_info(**kwargs)

    def repo_edit_pull_request(
        self,
        owner,
        repo,
        index,
        **kwargs
    ):
        """Update a pull request. If using deadline only the date will be taken into account, and time of day ignored.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.repo_edit_pull_request(owner, repo, index, async_req=True)
        >>> result = thread.get()

        Args:
            owner (str): owner of the repo
            repo (str): name of the repo
            index (int): index of the pull request to edit

        Keyword Args:
            body (EditPullRequestOption): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            PullRequest
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['owner'] = \
            owner
        kwargs['repo'] = \
            repo
        kwargs['index'] = \
            index
        return self.repo_edit_pull_request_endpoint.call_with_http_info(**kwargs)

    def repo_edit_release(
        self,
        owner,
        repo,
        id,
        **kwargs
    ):
        """Update a release  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.repo_edit_release(owner, repo, id, async_req=True)
        >>> result = thread.get()

        Args:
            owner (str): owner of the repo
            repo (str): name of the repo
            id (int): id of the release to edit

        Keyword Args:
            body (EditReleaseOption): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            Release
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['owner'] = \
            owner
        kwargs['repo'] = \
            repo
        kwargs['id'] = \
            id
        return self.repo_edit_release_endpoint.call_with_http_info(**kwargs)

    def repo_edit_release_attachment(
        self,
        owner,
        repo,
        id,
        attachment_id,
        **kwargs
    ):
        """Edit a release attachment  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.repo_edit_release_attachment(owner, repo, id, attachment_id, async_req=True)
        >>> result = thread.get()

        Args:
            owner (str): owner of the repo
            repo (str): name of the repo
            id (int): id of the release
            attachment_id (int): id of the attachment to edit

        Keyword Args:
            body (EditAttachmentOptions): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            Attachment
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['owner'] = \
            owner
        kwargs['repo'] = \
            repo
        kwargs['id'] = \
            id
        kwargs['attachment_id'] = \
            attachment_id
        return self.repo_edit_release_attachment_endpoint.call_with_http_info(**kwargs)

    def repo_edit_wiki_page(
        self,
        owner,
        repo,
        page_name,
        **kwargs
    ):
        """Edit a wiki page  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.repo_edit_wiki_page(owner, repo, page_name, async_req=True)
        >>> result = thread.get()

        Args:
            owner (str): owner of the repo
            repo (str): name of the repo
            page_name (str): name of the page

        Keyword Args:
            body (CreateWikiPageOptions): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            WikiPage
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['owner'] = \
            owner
        kwargs['repo'] = \
            repo
        kwargs['page_name'] = \
            page_name
        return self.repo_edit_wiki_page_endpoint.call_with_http_info(**kwargs)

    def repo_get(
        self,
        owner,
        repo,
        **kwargs
    ):
        """Get a repository  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.repo_get(owner, repo, async_req=True)
        >>> result = thread.get()

        Args:
            owner (str): owner of the repo
            repo (str): name of the repo

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            Repository
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['owner'] = \
            owner
        kwargs['repo'] = \
            repo
        return self.repo_get_endpoint.call_with_http_info(**kwargs)

    def repo_get_all_commits(
        self,
        owner,
        repo,
        **kwargs
    ):
        """Get a list of all commits from a repository  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.repo_get_all_commits(owner, repo, async_req=True)
        >>> result = thread.get()

        Args:
            owner (str): owner of the repo
            repo (str): name of the repo

        Keyword Args:
            sha (str): SHA or branch to start listing commits from (usually 'master'). [optional]
            path (str): filepath of a file/dir. [optional]
            stat (bool): include diff stats for every commit (disable for speedup, default 'true'). [optional]
            page (int): page number of results to return (1-based). [optional]
            limit (int): page size of results (ignored if used with 'path'). [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            [Commit]
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['owner'] = \
            owner
        kwargs['repo'] = \
            repo
        return self.repo_get_all_commits_endpoint.call_with_http_info(**kwargs)

    def repo_get_archive(
        self,
        owner,
        repo,
        archive,
        **kwargs
    ):
        """Get an archive of a repository  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.repo_get_archive(owner, repo, archive, async_req=True)
        >>> result = thread.get()

        Args:
            owner (str): owner of the repo
            repo (str): name of the repo
            archive (str): the git reference for download with attached archive format (e.g. master.zip)

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            None
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['owner'] = \
            owner
        kwargs['repo'] = \
            repo
        kwargs['archive'] = \
            archive
        return self.repo_get_archive_endpoint.call_with_http_info(**kwargs)

    def repo_get_assignees(
        self,
        owner,
        repo,
        **kwargs
    ):
        """Return all users that have write access and can be assigned to issues  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.repo_get_assignees(owner, repo, async_req=True)
        >>> result = thread.get()

        Args:
            owner (str): owner of the repo
            repo (str): name of the repo

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            [User]
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['owner'] = \
            owner
        kwargs['repo'] = \
            repo
        return self.repo_get_assignees_endpoint.call_with_http_info(**kwargs)

    def repo_get_branch(
        self,
        owner,
        repo,
        branch,
        **kwargs
    ):
        """Retrieve a specific branch from a repository, including its effective branch protection  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.repo_get_branch(owner, repo, branch, async_req=True)
        >>> result = thread.get()

        Args:
            owner (str): owner of the repo
            repo (str): name of the repo
            branch (str): branch to get

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            Branch
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['owner'] = \
            owner
        kwargs['repo'] = \
            repo
        kwargs['branch'] = \
            branch
        return self.repo_get_branch_endpoint.call_with_http_info(**kwargs)

    def repo_get_branch_protection(
        self,
        owner,
        repo,
        name,
        **kwargs
    ):
        """Get a specific branch protection for the repository  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.repo_get_branch_protection(owner, repo, name, async_req=True)
        >>> result = thread.get()

        Args:
            owner (str): owner of the repo
            repo (str): name of the repo
            name (str): name of protected branch

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            BranchProtection
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['owner'] = \
            owner
        kwargs['repo'] = \
            repo
        kwargs['name'] = \
            name
        return self.repo_get_branch_protection_endpoint.call_with_http_info(**kwargs)

    def repo_get_by_id(
        self,
        id,
        **kwargs
    ):
        """Get a repository by id  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.repo_get_by_id(id, async_req=True)
        >>> result = thread.get()

        Args:
            id (int): id of the repo to get

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            Repository
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['id'] = \
            id
        return self.repo_get_by_id_endpoint.call_with_http_info(**kwargs)

    def repo_get_combined_status_by_ref(
        self,
        owner,
        repo,
        ref,
        **kwargs
    ):
        """Get a commit's combined status, by branch/tag/commit reference  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.repo_get_combined_status_by_ref(owner, repo, ref, async_req=True)
        >>> result = thread.get()

        Args:
            owner (str): owner of the repo
            repo (str): name of the repo
            ref (str): name of branch/tag/commit

        Keyword Args:
            page (int): page number of results to return (1-based). [optional]
            limit (int): page size of results. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            CombinedStatus
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['owner'] = \
            owner
        kwargs['repo'] = \
            repo
        kwargs['ref'] = \
            ref
        return self.repo_get_combined_status_by_ref_endpoint.call_with_http_info(**kwargs)

    def repo_get_contents(
        self,
        owner,
        repo,
        filepath,
        **kwargs
    ):
        """Gets the metadata and contents (if a file) of an entry in a repository, or a list of entries if a dir  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.repo_get_contents(owner, repo, filepath, async_req=True)
        >>> result = thread.get()

        Args:
            owner (str): owner of the repo
            repo (str): name of the repo
            filepath (str): path of the dir, file, symlink or submodule in the repo

        Keyword Args:
            ref (str): The name of the commit/branch/tag. Default the repository’s default branch (usually master). [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            ContentsResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['owner'] = \
            owner
        kwargs['repo'] = \
            repo
        kwargs['filepath'] = \
            filepath
        return self.repo_get_contents_endpoint.call_with_http_info(**kwargs)

    def repo_get_contents_list(
        self,
        owner,
        repo,
        **kwargs
    ):
        """Gets the metadata of all the entries of the root dir  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.repo_get_contents_list(owner, repo, async_req=True)
        >>> result = thread.get()

        Args:
            owner (str): owner of the repo
            repo (str): name of the repo

        Keyword Args:
            ref (str): The name of the commit/branch/tag. Default the repository’s default branch (usually master). [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            [ContentsResponse]
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['owner'] = \
            owner
        kwargs['repo'] = \
            repo
        return self.repo_get_contents_list_endpoint.call_with_http_info(**kwargs)

    def repo_get_editor_config(
        self,
        owner,
        repo,
        filepath,
        **kwargs
    ):
        """Get the EditorConfig definitions of a file in a repository  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.repo_get_editor_config(owner, repo, filepath, async_req=True)
        >>> result = thread.get()

        Args:
            owner (str): owner of the repo
            repo (str): name of the repo
            filepath (str): filepath of file to get

        Keyword Args:
            ref (str): The name of the commit/branch/tag. Default the repository’s default branch (usually master). [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            None
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['owner'] = \
            owner
        kwargs['repo'] = \
            repo
        kwargs['filepath'] = \
            filepath
        return self.repo_get_editor_config_endpoint.call_with_http_info(**kwargs)

    def repo_get_git_hook(
        self,
        owner,
        repo,
        id,
        **kwargs
    ):
        """Get a Git hook  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.repo_get_git_hook(owner, repo, id, async_req=True)
        >>> result = thread.get()

        Args:
            owner (str): owner of the repo
            repo (str): name of the repo
            id (str): id of the hook to get

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            GitHook
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['owner'] = \
            owner
        kwargs['repo'] = \
            repo
        kwargs['id'] = \
            id
        return self.repo_get_git_hook_endpoint.call_with_http_info(**kwargs)

    def repo_get_hook(
        self,
        owner,
        repo,
        id,
        **kwargs
    ):
        """Get a hook  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.repo_get_hook(owner, repo, id, async_req=True)
        >>> result = thread.get()

        Args:
            owner (str): owner of the repo
            repo (str): name of the repo
            id (int): id of the hook to get

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            Hook
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['owner'] = \
            owner
        kwargs['repo'] = \
            repo
        kwargs['id'] = \
            id
        return self.repo_get_hook_endpoint.call_with_http_info(**kwargs)

    def repo_get_issue_templates(
        self,
        owner,
        repo,
        **kwargs
    ):
        """Get available issue templates for a repository  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.repo_get_issue_templates(owner, repo, async_req=True)
        >>> result = thread.get()

        Args:
            owner (str): owner of the repo
            repo (str): name of the repo

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            [IssueTemplate]
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['owner'] = \
            owner
        kwargs['repo'] = \
            repo
        return self.repo_get_issue_templates_endpoint.call_with_http_info(**kwargs)

    def repo_get_key(
        self,
        owner,
        repo,
        id,
        **kwargs
    ):
        """Get a repository's key by id  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.repo_get_key(owner, repo, id, async_req=True)
        >>> result = thread.get()

        Args:
            owner (str): owner of the repo
            repo (str): name of the repo
            id (int): id of the key to get

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            DeployKey
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['owner'] = \
            owner
        kwargs['repo'] = \
            repo
        kwargs['id'] = \
            id
        return self.repo_get_key_endpoint.call_with_http_info(**kwargs)

    def repo_get_languages(
        self,
        owner,
        repo,
        **kwargs
    ):
        """Get languages and number of bytes of code written  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.repo_get_languages(owner, repo, async_req=True)
        >>> result = thread.get()

        Args:
            owner (str): owner of the repo
            repo (str): name of the repo

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            {str: (int,)}
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['owner'] = \
            owner
        kwargs['repo'] = \
            repo
        return self.repo_get_languages_endpoint.call_with_http_info(**kwargs)

    def repo_get_note(
        self,
        owner,
        repo,
        sha,
        **kwargs
    ):
        """Get a note corresponding to a single commit from a repository  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.repo_get_note(owner, repo, sha, async_req=True)
        >>> result = thread.get()

        Args:
            owner (str): owner of the repo
            repo (str): name of the repo
            sha (str): a git ref or commit sha

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            Note
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['owner'] = \
            owner
        kwargs['repo'] = \
            repo
        kwargs['sha'] = \
            sha
        return self.repo_get_note_endpoint.call_with_http_info(**kwargs)

    def repo_get_pull_request(
        self,
        owner,
        repo,
        index,
        **kwargs
    ):
        """Get a pull request  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.repo_get_pull_request(owner, repo, index, async_req=True)
        >>> result = thread.get()

        Args:
            owner (str): owner of the repo
            repo (str): name of the repo
            index (int): index of the pull request to get

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            PullRequest
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['owner'] = \
            owner
        kwargs['repo'] = \
            repo
        kwargs['index'] = \
            index
        return self.repo_get_pull_request_endpoint.call_with_http_info(**kwargs)

    def repo_get_pull_request_commits(
        self,
        owner,
        repo,
        index,
        **kwargs
    ):
        """Get commits for a pull request  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.repo_get_pull_request_commits(owner, repo, index, async_req=True)
        >>> result = thread.get()

        Args:
            owner (str): owner of the repo
            repo (str): name of the repo
            index (int): index of the pull request to get

        Keyword Args:
            page (int): page number of results to return (1-based). [optional]
            limit (int): page size of results. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            [Commit]
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['owner'] = \
            owner
        kwargs['repo'] = \
            repo
        kwargs['index'] = \
            index
        return self.repo_get_pull_request_commits_endpoint.call_with_http_info(**kwargs)

    def repo_get_pull_request_files(
        self,
        owner,
        repo,
        index,
        **kwargs
    ):
        """Get changed files for a pull request  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.repo_get_pull_request_files(owner, repo, index, async_req=True)
        >>> result = thread.get()

        Args:
            owner (str): owner of the repo
            repo (str): name of the repo
            index (int): index of the pull request to get

        Keyword Args:
            skip_to (str): skip to given file. [optional]
            whitespace (str): whitespace behavior. [optional]
            page (int): page number of results to return (1-based). [optional]
            limit (int): page size of results. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            [ChangedFile]
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['owner'] = \
            owner
        kwargs['repo'] = \
            repo
        kwargs['index'] = \
            index
        return self.repo_get_pull_request_files_endpoint.call_with_http_info(**kwargs)

    def repo_get_pull_review(
        self,
        owner,
        repo,
        index,
        id,
        **kwargs
    ):
        """Get a specific review for a pull request  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.repo_get_pull_review(owner, repo, index, id, async_req=True)
        >>> result = thread.get()

        Args:
            owner (str): owner of the repo
            repo (str): name of the repo
            index (int): index of the pull request
            id (int): id of the review

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            PullReview
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['owner'] = \
            owner
        kwargs['repo'] = \
            repo
        kwargs['index'] = \
            index
        kwargs['id'] = \
            id
        return self.repo_get_pull_review_endpoint.call_with_http_info(**kwargs)

    def repo_get_pull_review_comments(
        self,
        owner,
        repo,
        index,
        id,
        **kwargs
    ):
        """Get a specific review for a pull request  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.repo_get_pull_review_comments(owner, repo, index, id, async_req=True)
        >>> result = thread.get()

        Args:
            owner (str): owner of the repo
            repo (str): name of the repo
            index (int): index of the pull request
            id (int): id of the review

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            [PullReviewComment]
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['owner'] = \
            owner
        kwargs['repo'] = \
            repo
        kwargs['index'] = \
            index
        kwargs['id'] = \
            id
        return self.repo_get_pull_review_comments_endpoint.call_with_http_info(**kwargs)

    def repo_get_push_mirror_by_remote_name(
        self,
        owner,
        repo,
        name,
        **kwargs
    ):
        """Get push mirror of the repository by remoteName  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.repo_get_push_mirror_by_remote_name(owner, repo, name, async_req=True)
        >>> result = thread.get()

        Args:
            owner (str): owner of the repo
            repo (str): name of the repo
            name (str): remote name of push mirror

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            PushMirror
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['owner'] = \
            owner
        kwargs['repo'] = \
            repo
        kwargs['name'] = \
            name
        return self.repo_get_push_mirror_by_remote_name_endpoint.call_with_http_info(**kwargs)

    def repo_get_raw_file(
        self,
        owner,
        repo,
        filepath,
        **kwargs
    ):
        """Get a file from a repository  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.repo_get_raw_file(owner, repo, filepath, async_req=True)
        >>> result = thread.get()

        Args:
            owner (str): owner of the repo
            repo (str): name of the repo
            filepath (str): filepath of the file to get

        Keyword Args:
            ref (str): The name of the commit/branch/tag. Default the repository’s default branch (usually master). [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            None
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['owner'] = \
            owner
        kwargs['repo'] = \
            repo
        kwargs['filepath'] = \
            filepath
        return self.repo_get_raw_file_endpoint.call_with_http_info(**kwargs)

    def repo_get_raw_file_or_lfs(
        self,
        owner,
        repo,
        filepath,
        **kwargs
    ):
        """Get a file or it's LFS object from a repository  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.repo_get_raw_file_or_lfs(owner, repo, filepath, async_req=True)
        >>> result = thread.get()

        Args:
            owner (str): owner of the repo
            repo (str): name of the repo
            filepath (str): filepath of the file to get

        Keyword Args:
            ref (str): The name of the commit/branch/tag. Default the repository’s default branch (usually master). [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            None
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['owner'] = \
            owner
        kwargs['repo'] = \
            repo
        kwargs['filepath'] = \
            filepath
        return self.repo_get_raw_file_or_lfs_endpoint.call_with_http_info(**kwargs)

    def repo_get_release(
        self,
        owner,
        repo,
        id,
        **kwargs
    ):
        """Get a release  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.repo_get_release(owner, repo, id, async_req=True)
        >>> result = thread.get()

        Args:
            owner (str): owner of the repo
            repo (str): name of the repo
            id (int): id of the release to get

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            Release
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['owner'] = \
            owner
        kwargs['repo'] = \
            repo
        kwargs['id'] = \
            id
        return self.repo_get_release_endpoint.call_with_http_info(**kwargs)

    def repo_get_release_attachment(
        self,
        owner,
        repo,
        id,
        attachment_id,
        **kwargs
    ):
        """Get a release attachment  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.repo_get_release_attachment(owner, repo, id, attachment_id, async_req=True)
        >>> result = thread.get()

        Args:
            owner (str): owner of the repo
            repo (str): name of the repo
            id (int): id of the release
            attachment_id (int): id of the attachment to get

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            Attachment
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['owner'] = \
            owner
        kwargs['repo'] = \
            repo
        kwargs['id'] = \
            id
        kwargs['attachment_id'] = \
            attachment_id
        return self.repo_get_release_attachment_endpoint.call_with_http_info(**kwargs)

    def repo_get_release_by_tag(
        self,
        owner,
        repo,
        tag,
        **kwargs
    ):
        """Get a release by tag name  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.repo_get_release_by_tag(owner, repo, tag, async_req=True)
        >>> result = thread.get()

        Args:
            owner (str): owner of the repo
            repo (str): name of the repo
            tag (str): tag name of the release to get

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            Release
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['owner'] = \
            owner
        kwargs['repo'] = \
            repo
        kwargs['tag'] = \
            tag
        return self.repo_get_release_by_tag_endpoint.call_with_http_info(**kwargs)

    def repo_get_repo_permissions(
        self,
        owner,
        repo,
        collaborator,
        **kwargs
    ):
        """Get repository permissions for a user  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.repo_get_repo_permissions(owner, repo, collaborator, async_req=True)
        >>> result = thread.get()

        Args:
            owner (str): owner of the repo
            repo (str): name of the repo
            collaborator (str): username of the collaborator

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            RepoCollaboratorPermission
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['owner'] = \
            owner
        kwargs['repo'] = \
            repo
        kwargs['collaborator'] = \
            collaborator
        return self.repo_get_repo_permissions_endpoint.call_with_http_info(**kwargs)

    def repo_get_reviewers(
        self,
        owner,
        repo,
        **kwargs
    ):
        """Return all users that can be requested to review in this repo  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.repo_get_reviewers(owner, repo, async_req=True)
        >>> result = thread.get()

        Args:
            owner (str): owner of the repo
            repo (str): name of the repo

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            [User]
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['owner'] = \
            owner
        kwargs['repo'] = \
            repo
        return self.repo_get_reviewers_endpoint.call_with_http_info(**kwargs)

    def repo_get_single_commit(
        self,
        owner,
        repo,
        sha,
        **kwargs
    ):
        """Get a single commit from a repository  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.repo_get_single_commit(owner, repo, sha, async_req=True)
        >>> result = thread.get()

        Args:
            owner (str): owner of the repo
            repo (str): name of the repo
            sha (str): a git ref or commit sha

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            Commit
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['owner'] = \
            owner
        kwargs['repo'] = \
            repo
        kwargs['sha'] = \
            sha
        return self.repo_get_single_commit_endpoint.call_with_http_info(**kwargs)

    def repo_get_tag(
        self,
        owner,
        repo,
        tag,
        **kwargs
    ):
        """Get the tag of a repository by tag name  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.repo_get_tag(owner, repo, tag, async_req=True)
        >>> result = thread.get()

        Args:
            owner (str): owner of the repo
            repo (str): name of the repo
            tag (str): name of tag

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            Tag
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['owner'] = \
            owner
        kwargs['repo'] = \
            repo
        kwargs['tag'] = \
            tag
        return self.repo_get_tag_endpoint.call_with_http_info(**kwargs)

    def repo_get_wiki_page(
        self,
        owner,
        repo,
        page_name,
        **kwargs
    ):
        """Get a wiki page  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.repo_get_wiki_page(owner, repo, page_name, async_req=True)
        >>> result = thread.get()

        Args:
            owner (str): owner of the repo
            repo (str): name of the repo
            page_name (str): name of the page

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            WikiPage
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['owner'] = \
            owner
        kwargs['repo'] = \
            repo
        kwargs['page_name'] = \
            page_name
        return self.repo_get_wiki_page_endpoint.call_with_http_info(**kwargs)

    def repo_get_wiki_page_revisions(
        self,
        owner,
        repo,
        page_name,
        **kwargs
    ):
        """Get revisions of a wiki page  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.repo_get_wiki_page_revisions(owner, repo, page_name, async_req=True)
        >>> result = thread.get()

        Args:
            owner (str): owner of the repo
            repo (str): name of the repo
            page_name (str): name of the page

        Keyword Args:
            page (int): page number of results to return (1-based). [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            WikiCommitList
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['owner'] = \
            owner
        kwargs['repo'] = \
            repo
        kwargs['page_name'] = \
            page_name
        return self.repo_get_wiki_page_revisions_endpoint.call_with_http_info(**kwargs)

    def repo_get_wiki_pages(
        self,
        owner,
        repo,
        **kwargs
    ):
        """Get all wiki pages  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.repo_get_wiki_pages(owner, repo, async_req=True)
        >>> result = thread.get()

        Args:
            owner (str): owner of the repo
            repo (str): name of the repo

        Keyword Args:
            page (int): page number of results to return (1-based). [optional]
            limit (int): page size of results. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            [WikiPageMetaData]
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['owner'] = \
            owner
        kwargs['repo'] = \
            repo
        return self.repo_get_wiki_pages_endpoint.call_with_http_info(**kwargs)

    def repo_list_all_git_refs(
        self,
        owner,
        repo,
        **kwargs
    ):
        """Get specified ref or filtered repository's refs  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.repo_list_all_git_refs(owner, repo, async_req=True)
        >>> result = thread.get()

        Args:
            owner (str): owner of the repo
            repo (str): name of the repo

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            [Reference]
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['owner'] = \
            owner
        kwargs['repo'] = \
            repo
        return self.repo_list_all_git_refs_endpoint.call_with_http_info(**kwargs)

    def repo_list_branch_protection(
        self,
        owner,
        repo,
        **kwargs
    ):
        """List branch protections for a repository  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.repo_list_branch_protection(owner, repo, async_req=True)
        >>> result = thread.get()

        Args:
            owner (str): owner of the repo
            repo (str): name of the repo

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            [BranchProtection]
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['owner'] = \
            owner
        kwargs['repo'] = \
            repo
        return self.repo_list_branch_protection_endpoint.call_with_http_info(**kwargs)

    def repo_list_branches(
        self,
        owner,
        repo,
        **kwargs
    ):
        """List a repository's branches  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.repo_list_branches(owner, repo, async_req=True)
        >>> result = thread.get()

        Args:
            owner (str): owner of the repo
            repo (str): name of the repo

        Keyword Args:
            page (int): page number of results to return (1-based). [optional]
            limit (int): page size of results. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            [Branch]
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['owner'] = \
            owner
        kwargs['repo'] = \
            repo
        return self.repo_list_branches_endpoint.call_with_http_info(**kwargs)

    def repo_list_collaborators(
        self,
        owner,
        repo,
        **kwargs
    ):
        """List a repository's collaborators  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.repo_list_collaborators(owner, repo, async_req=True)
        >>> result = thread.get()

        Args:
            owner (str): owner of the repo
            repo (str): name of the repo

        Keyword Args:
            page (int): page number of results to return (1-based). [optional]
            limit (int): page size of results. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            [User]
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['owner'] = \
            owner
        kwargs['repo'] = \
            repo
        return self.repo_list_collaborators_endpoint.call_with_http_info(**kwargs)

    def repo_list_git_hooks(
        self,
        owner,
        repo,
        **kwargs
    ):
        """List the Git hooks in a repository  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.repo_list_git_hooks(owner, repo, async_req=True)
        >>> result = thread.get()

        Args:
            owner (str): owner of the repo
            repo (str): name of the repo

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            [GitHook]
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['owner'] = \
            owner
        kwargs['repo'] = \
            repo
        return self.repo_list_git_hooks_endpoint.call_with_http_info(**kwargs)

    def repo_list_git_refs(
        self,
        owner,
        repo,
        ref,
        **kwargs
    ):
        """Get specified ref or filtered repository's refs  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.repo_list_git_refs(owner, repo, ref, async_req=True)
        >>> result = thread.get()

        Args:
            owner (str): owner of the repo
            repo (str): name of the repo
            ref (str): part or full name of the ref

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            [Reference]
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['owner'] = \
            owner
        kwargs['repo'] = \
            repo
        kwargs['ref'] = \
            ref
        return self.repo_list_git_refs_endpoint.call_with_http_info(**kwargs)

    def repo_list_hooks(
        self,
        owner,
        repo,
        **kwargs
    ):
        """List the hooks in a repository  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.repo_list_hooks(owner, repo, async_req=True)
        >>> result = thread.get()

        Args:
            owner (str): owner of the repo
            repo (str): name of the repo

        Keyword Args:
            page (int): page number of results to return (1-based). [optional]
            limit (int): page size of results. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            [Hook]
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['owner'] = \
            owner
        kwargs['repo'] = \
            repo
        return self.repo_list_hooks_endpoint.call_with_http_info(**kwargs)

    def repo_list_keys(
        self,
        owner,
        repo,
        **kwargs
    ):
        """List a repository's keys  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.repo_list_keys(owner, repo, async_req=True)
        >>> result = thread.get()

        Args:
            owner (str): owner of the repo
            repo (str): name of the repo

        Keyword Args:
            key_id (int): the key_id to search for. [optional]
            fingerprint (str): fingerprint of the key. [optional]
            page (int): page number of results to return (1-based). [optional]
            limit (int): page size of results. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            [DeployKey]
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['owner'] = \
            owner
        kwargs['repo'] = \
            repo
        return self.repo_list_keys_endpoint.call_with_http_info(**kwargs)

    def repo_list_pull_requests(
        self,
        owner,
        repo,
        **kwargs
    ):
        """List a repo's pull requests  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.repo_list_pull_requests(owner, repo, async_req=True)
        >>> result = thread.get()

        Args:
            owner (str): owner of the repo
            repo (str): name of the repo

        Keyword Args:
            state (str): State of pull request: open or closed (optional). [optional]
            sort (str): Type of sort. [optional]
            milestone (int): ID of the milestone. [optional]
            labels ([int]): Label IDs. [optional]
            page (int): page number of results to return (1-based). [optional]
            limit (int): page size of results. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            [PullRequest]
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['owner'] = \
            owner
        kwargs['repo'] = \
            repo
        return self.repo_list_pull_requests_endpoint.call_with_http_info(**kwargs)

    def repo_list_pull_reviews(
        self,
        owner,
        repo,
        index,
        **kwargs
    ):
        """List all reviews for a pull request  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.repo_list_pull_reviews(owner, repo, index, async_req=True)
        >>> result = thread.get()

        Args:
            owner (str): owner of the repo
            repo (str): name of the repo
            index (int): index of the pull request

        Keyword Args:
            page (int): page number of results to return (1-based). [optional]
            limit (int): page size of results. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            [PullReview]
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['owner'] = \
            owner
        kwargs['repo'] = \
            repo
        kwargs['index'] = \
            index
        return self.repo_list_pull_reviews_endpoint.call_with_http_info(**kwargs)

    def repo_list_push_mirrors(
        self,
        owner,
        repo,
        **kwargs
    ):
        """Get all push mirrors of the repository  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.repo_list_push_mirrors(owner, repo, async_req=True)
        >>> result = thread.get()

        Args:
            owner (str): owner of the repo
            repo (str): name of the repo

        Keyword Args:
            page (int): page number of results to return (1-based). [optional]
            limit (int): page size of results. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            [PushMirror]
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['owner'] = \
            owner
        kwargs['repo'] = \
            repo
        return self.repo_list_push_mirrors_endpoint.call_with_http_info(**kwargs)

    def repo_list_release_attachments(
        self,
        owner,
        repo,
        id,
        **kwargs
    ):
        """List release's attachments  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.repo_list_release_attachments(owner, repo, id, async_req=True)
        >>> result = thread.get()

        Args:
            owner (str): owner of the repo
            repo (str): name of the repo
            id (int): id of the release

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            [Attachment]
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['owner'] = \
            owner
        kwargs['repo'] = \
            repo
        kwargs['id'] = \
            id
        return self.repo_list_release_attachments_endpoint.call_with_http_info(**kwargs)

    def repo_list_releases(
        self,
        owner,
        repo,
        **kwargs
    ):
        """List a repo's releases  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.repo_list_releases(owner, repo, async_req=True)
        >>> result = thread.get()

        Args:
            owner (str): owner of the repo
            repo (str): name of the repo

        Keyword Args:
            draft (bool): filter (exclude / include) drafts, if you dont have repo write access none will show. [optional]
            pre_release (bool): filter (exclude / include) pre-releases. [optional]
            per_page (int): page size of results, deprecated - use limit. [optional]
            page (int): page number of results to return (1-based). [optional]
            limit (int): page size of results. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            [Release]
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['owner'] = \
            owner
        kwargs['repo'] = \
            repo
        return self.repo_list_releases_endpoint.call_with_http_info(**kwargs)

    def repo_list_stargazers(
        self,
        owner,
        repo,
        **kwargs
    ):
        """List a repo's stargazers  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.repo_list_stargazers(owner, repo, async_req=True)
        >>> result = thread.get()

        Args:
            owner (str): owner of the repo
            repo (str): name of the repo

        Keyword Args:
            page (int): page number of results to return (1-based). [optional]
            limit (int): page size of results. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            [User]
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['owner'] = \
            owner
        kwargs['repo'] = \
            repo
        return self.repo_list_stargazers_endpoint.call_with_http_info(**kwargs)

    def repo_list_statuses(
        self,
        owner,
        repo,
        sha,
        **kwargs
    ):
        """Get a commit's statuses  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.repo_list_statuses(owner, repo, sha, async_req=True)
        >>> result = thread.get()

        Args:
            owner (str): owner of the repo
            repo (str): name of the repo
            sha (str): sha of the commit

        Keyword Args:
            sort (str): type of sort. [optional]
            state (str): type of state. [optional]
            page (int): page number of results to return (1-based). [optional]
            limit (int): page size of results. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            [CommitStatus]
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['owner'] = \
            owner
        kwargs['repo'] = \
            repo
        kwargs['sha'] = \
            sha
        return self.repo_list_statuses_endpoint.call_with_http_info(**kwargs)

    def repo_list_statuses_by_ref(
        self,
        owner,
        repo,
        ref,
        **kwargs
    ):
        """Get a commit's statuses, by branch/tag/commit reference  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.repo_list_statuses_by_ref(owner, repo, ref, async_req=True)
        >>> result = thread.get()

        Args:
            owner (str): owner of the repo
            repo (str): name of the repo
            ref (str): name of branch/tag/commit

        Keyword Args:
            sort (str): type of sort. [optional]
            state (str): type of state. [optional]
            page (int): page number of results to return (1-based). [optional]
            limit (int): page size of results. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            [CommitStatus]
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['owner'] = \
            owner
        kwargs['repo'] = \
            repo
        kwargs['ref'] = \
            ref
        return self.repo_list_statuses_by_ref_endpoint.call_with_http_info(**kwargs)

    def repo_list_subscribers(
        self,
        owner,
        repo,
        **kwargs
    ):
        """List a repo's watchers  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.repo_list_subscribers(owner, repo, async_req=True)
        >>> result = thread.get()

        Args:
            owner (str): owner of the repo
            repo (str): name of the repo

        Keyword Args:
            page (int): page number of results to return (1-based). [optional]
            limit (int): page size of results. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            [User]
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['owner'] = \
            owner
        kwargs['repo'] = \
            repo
        return self.repo_list_subscribers_endpoint.call_with_http_info(**kwargs)

    def repo_list_tags(
        self,
        owner,
        repo,
        **kwargs
    ):
        """List a repository's tags  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.repo_list_tags(owner, repo, async_req=True)
        >>> result = thread.get()

        Args:
            owner (str): owner of the repo
            repo (str): name of the repo

        Keyword Args:
            page (int): page number of results to return (1-based). [optional]
            limit (int): page size of results, default maximum page size is 50. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            [Tag]
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['owner'] = \
            owner
        kwargs['repo'] = \
            repo
        return self.repo_list_tags_endpoint.call_with_http_info(**kwargs)

    def repo_list_teams(
        self,
        owner,
        repo,
        **kwargs
    ):
        """List a repository's teams  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.repo_list_teams(owner, repo, async_req=True)
        >>> result = thread.get()

        Args:
            owner (str): owner of the repo
            repo (str): name of the repo

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            [Team]
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['owner'] = \
            owner
        kwargs['repo'] = \
            repo
        return self.repo_list_teams_endpoint.call_with_http_info(**kwargs)

    def repo_list_topics(
        self,
        owner,
        repo,
        **kwargs
    ):
        """Get list of topics that a repository has  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.repo_list_topics(owner, repo, async_req=True)
        >>> result = thread.get()

        Args:
            owner (str): owner of the repo
            repo (str): name of the repo

        Keyword Args:
            page (int): page number of results to return (1-based). [optional]
            limit (int): page size of results. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            TopicName
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['owner'] = \
            owner
        kwargs['repo'] = \
            repo
        return self.repo_list_topics_endpoint.call_with_http_info(**kwargs)

    def repo_merge_pull_request(
        self,
        owner,
        repo,
        index,
        **kwargs
    ):
        """Merge a pull request  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.repo_merge_pull_request(owner, repo, index, async_req=True)
        >>> result = thread.get()

        Args:
            owner (str): owner of the repo
            repo (str): name of the repo
            index (int): index of the pull request to merge

        Keyword Args:
            body (MergePullRequestOption): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            None
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['owner'] = \
            owner
        kwargs['repo'] = \
            repo
        kwargs['index'] = \
            index
        return self.repo_merge_pull_request_endpoint.call_with_http_info(**kwargs)

    def repo_migrate(
        self,
        **kwargs
    ):
        """Migrate a remote git repository  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.repo_migrate(async_req=True)
        >>> result = thread.get()


        Keyword Args:
            body (MigrateRepoOptions): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            Repository
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        return self.repo_migrate_endpoint.call_with_http_info(**kwargs)

    def repo_mirror_sync(
        self,
        owner,
        repo,
        **kwargs
    ):
        """Sync a mirrored repository  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.repo_mirror_sync(owner, repo, async_req=True)
        >>> result = thread.get()

        Args:
            owner (str): owner of the repo to sync
            repo (str): name of the repo to sync

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            None
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['owner'] = \
            owner
        kwargs['repo'] = \
            repo
        return self.repo_mirror_sync_endpoint.call_with_http_info(**kwargs)

    def repo_pull_request_is_merged(
        self,
        owner,
        repo,
        index,
        **kwargs
    ):
        """Check if a pull request has been merged  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.repo_pull_request_is_merged(owner, repo, index, async_req=True)
        >>> result = thread.get()

        Args:
            owner (str): owner of the repo
            repo (str): name of the repo
            index (int): index of the pull request

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            None
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['owner'] = \
            owner
        kwargs['repo'] = \
            repo
        kwargs['index'] = \
            index
        return self.repo_pull_request_is_merged_endpoint.call_with_http_info(**kwargs)

    def repo_push_mirror_sync(
        self,
        owner,
        repo,
        **kwargs
    ):
        """Sync all push mirrored repository  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.repo_push_mirror_sync(owner, repo, async_req=True)
        >>> result = thread.get()

        Args:
            owner (str): owner of the repo to sync
            repo (str): name of the repo to sync

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            None
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['owner'] = \
            owner
        kwargs['repo'] = \
            repo
        return self.repo_push_mirror_sync_endpoint.call_with_http_info(**kwargs)

    def repo_search(
        self,
        **kwargs
    ):
        """Search for repositories  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.repo_search(async_req=True)
        >>> result = thread.get()


        Keyword Args:
            q (str): keyword. [optional]
            topic (bool): Limit search to repositories with keyword as topic. [optional]
            include_desc (bool): include search of keyword within repository description. [optional]
            uid (int): search only for repos that the user with the given id owns or contributes to. [optional]
            priority_owner_id (int): repo owner to prioritize in the results. [optional]
            team_id (int): search only for repos that belong to the given team id. [optional]
            starred_by (int): search only for repos that the user with the given id has starred. [optional]
            private (bool): include private repositories this user has access to (defaults to true). [optional]
            is_private (bool): show only pubic, private or all repositories (defaults to all). [optional]
            template (bool): include template repositories this user has access to (defaults to true). [optional]
            archived (bool): show only archived, non-archived or all repositories (defaults to all). [optional]
            mode (str): type of repository to search for. Supported values are \"fork\", \"source\", \"mirror\" and \"collaborative\". [optional]
            exclusive (bool): if `uid` is given, search only for repos that the user owns. [optional]
            sort (str): sort repos by attribute. Supported values are \"alpha\", \"created\", \"updated\", \"size\", and \"id\". Default is \"alpha\". [optional]
            order (str): sort order, either \"asc\" (ascending) or \"desc\" (descending). Default is \"asc\", ignored if \"sort\" is not specified.. [optional]
            page (int): page number of results to return (1-based). [optional]
            limit (int): page size of results. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            SearchResults
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        return self.repo_search_endpoint.call_with_http_info(**kwargs)

    def repo_signing_key(
        self,
        owner,
        repo,
        **kwargs
    ):
        """Get signing-key.gpg for given repository  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.repo_signing_key(owner, repo, async_req=True)
        >>> result = thread.get()

        Args:
            owner (str): owner of the repo
            repo (str): name of the repo

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            str
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['owner'] = \
            owner
        kwargs['repo'] = \
            repo
        return self.repo_signing_key_endpoint.call_with_http_info(**kwargs)

    def repo_submit_pull_review(
        self,
        owner,
        repo,
        index,
        id,
        body,
        **kwargs
    ):
        """Submit a pending review to an pull request  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.repo_submit_pull_review(owner, repo, index, id, body, async_req=True)
        >>> result = thread.get()

        Args:
            owner (str): owner of the repo
            repo (str): name of the repo
            index (int): index of the pull request
            id (int): id of the review
            body (SubmitPullReviewOptions):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            PullReview
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['owner'] = \
            owner
        kwargs['repo'] = \
            repo
        kwargs['index'] = \
            index
        kwargs['id'] = \
            id
        kwargs['body'] = \
            body
        return self.repo_submit_pull_review_endpoint.call_with_http_info(**kwargs)

    def repo_test_hook(
        self,
        owner,
        repo,
        id,
        **kwargs
    ):
        """Test a push webhook  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.repo_test_hook(owner, repo, id, async_req=True)
        >>> result = thread.get()

        Args:
            owner (str): owner of the repo
            repo (str): name of the repo
            id (int): id of the hook to test

        Keyword Args:
            ref (str): The name of the commit/branch/tag, indicates which commit will be loaded to the webhook payload.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            None
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['owner'] = \
            owner
        kwargs['repo'] = \
            repo
        kwargs['id'] = \
            id
        return self.repo_test_hook_endpoint.call_with_http_info(**kwargs)

    def repo_tracked_times(
        self,
        owner,
        repo,
        **kwargs
    ):
        """List a repo's tracked times  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.repo_tracked_times(owner, repo, async_req=True)
        >>> result = thread.get()

        Args:
            owner (str): owner of the repo
            repo (str): name of the repo

        Keyword Args:
            user (str): optional filter by user (available for issue managers). [optional]
            since (datetime): Only show times updated after the given time. This is a timestamp in RFC 3339 format. [optional]
            before (datetime): Only show times updated before the given time. This is a timestamp in RFC 3339 format. [optional]
            page (int): page number of results to return (1-based). [optional]
            limit (int): page size of results. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            [TrackedTime]
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['owner'] = \
            owner
        kwargs['repo'] = \
            repo
        return self.repo_tracked_times_endpoint.call_with_http_info(**kwargs)

    def repo_transfer(
        self,
        owner,
        repo,
        body,
        **kwargs
    ):
        """Transfer a repo ownership  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.repo_transfer(owner, repo, body, async_req=True)
        >>> result = thread.get()

        Args:
            owner (str): owner of the repo to transfer
            repo (str): name of the repo to transfer
            body (TransferRepoOption): Transfer Options

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            Repository
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['owner'] = \
            owner
        kwargs['repo'] = \
            repo
        kwargs['body'] = \
            body
        return self.repo_transfer_endpoint.call_with_http_info(**kwargs)

    def repo_un_dismiss_pull_review(
        self,
        owner,
        repo,
        index,
        id,
        **kwargs
    ):
        """Cancel to dismiss a review for a pull request  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.repo_un_dismiss_pull_review(owner, repo, index, id, async_req=True)
        >>> result = thread.get()

        Args:
            owner (str): owner of the repo
            repo (str): name of the repo
            index (int): index of the pull request
            id (int): id of the review

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            PullReview
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['owner'] = \
            owner
        kwargs['repo'] = \
            repo
        kwargs['index'] = \
            index
        kwargs['id'] = \
            id
        return self.repo_un_dismiss_pull_review_endpoint.call_with_http_info(**kwargs)

    def repo_update_file(
        self,
        owner,
        repo,
        filepath,
        body,
        **kwargs
    ):
        """Update a file in a repository  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.repo_update_file(owner, repo, filepath, body, async_req=True)
        >>> result = thread.get()

        Args:
            owner (str): owner of the repo
            repo (str): name of the repo
            filepath (str): path of the file to update
            body (UpdateFileOptions):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            FileResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['owner'] = \
            owner
        kwargs['repo'] = \
            repo
        kwargs['filepath'] = \
            filepath
        kwargs['body'] = \
            body
        return self.repo_update_file_endpoint.call_with_http_info(**kwargs)

    def repo_update_pull_request(
        self,
        owner,
        repo,
        index,
        **kwargs
    ):
        """Merge PR's baseBranch into headBranch  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.repo_update_pull_request(owner, repo, index, async_req=True)
        >>> result = thread.get()

        Args:
            owner (str): owner of the repo
            repo (str): name of the repo
            index (int): index of the pull request to get

        Keyword Args:
            style (str): how to update pull request. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            None
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['owner'] = \
            owner
        kwargs['repo'] = \
            repo
        kwargs['index'] = \
            index
        return self.repo_update_pull_request_endpoint.call_with_http_info(**kwargs)

    def repo_update_topics(
        self,
        owner,
        repo,
        **kwargs
    ):
        """Replace list of topics for a repository  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.repo_update_topics(owner, repo, async_req=True)
        >>> result = thread.get()

        Args:
            owner (str): owner of the repo
            repo (str): name of the repo

        Keyword Args:
            body (RepoTopicOptions): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            None
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['owner'] = \
            owner
        kwargs['repo'] = \
            repo
        return self.repo_update_topics_endpoint.call_with_http_info(**kwargs)

    def topic_search(
        self,
        q,
        **kwargs
    ):
        """search topics via keyword  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.topic_search(q, async_req=True)
        >>> result = thread.get()

        Args:
            q (str): keywords to search

        Keyword Args:
            page (int): page number of results to return (1-based). [optional]
            limit (int): page size of results. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            [TopicResponse]
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['q'] = \
            q
        return self.topic_search_endpoint.call_with_http_info(**kwargs)

    def user_current_check_subscription(
        self,
        owner,
        repo,
        **kwargs
    ):
        """Check if the current user is watching a repo  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.user_current_check_subscription(owner, repo, async_req=True)
        >>> result = thread.get()

        Args:
            owner (str): owner of the repo
            repo (str): name of the repo

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            WatchInfo
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['owner'] = \
            owner
        kwargs['repo'] = \
            repo
        return self.user_current_check_subscription_endpoint.call_with_http_info(**kwargs)

    def user_current_delete_subscription(
        self,
        owner,
        repo,
        **kwargs
    ):
        """Unwatch a repo  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.user_current_delete_subscription(owner, repo, async_req=True)
        >>> result = thread.get()

        Args:
            owner (str): owner of the repo
            repo (str): name of the repo

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            None
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['owner'] = \
            owner
        kwargs['repo'] = \
            repo
        return self.user_current_delete_subscription_endpoint.call_with_http_info(**kwargs)

    def user_current_put_subscription(
        self,
        owner,
        repo,
        **kwargs
    ):
        """Watch a repo  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.user_current_put_subscription(owner, repo, async_req=True)
        >>> result = thread.get()

        Args:
            owner (str): owner of the repo
            repo (str): name of the repo

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            WatchInfo
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['owner'] = \
            owner
        kwargs['repo'] = \
            repo
        return self.user_current_put_subscription_endpoint.call_with_http_info(**kwargs)

    def user_tracked_times(
        self,
        owner,
        repo,
        user,
        **kwargs
    ):
        """List a user's tracked times in a repo  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.user_tracked_times(owner, repo, user, async_req=True)
        >>> result = thread.get()

        Args:
            owner (str): owner of the repo
            repo (str): name of the repo
            user (str): username of user

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            [TrackedTime]
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['owner'] = \
            owner
        kwargs['repo'] = \
            repo
        kwargs['user'] = \
            user
        return self.user_tracked_times_endpoint.call_with_http_info(**kwargs)

